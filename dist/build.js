!function(n){var C={};function e(g){if(C[g])return C[g].exports;var I=C[g]={i:g,l:!1,exports:{}};return n[g].call(I.exports,I,I.exports,e),I.l=!0,I.exports}e.m=n,e.c=C,e.d=function(g,I,n){e.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:n})},e.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},e.t=function(I,g){if(1&g&&(I=e(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var C in I)e.d(n,C,function(g){return I[g]}.bind(null,C));return n},e.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return e.d(I,"a",I),I},e.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},e.p="/dist/",e(e.s=8)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _renderizador__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n\n/**\n * @fileoverview Máquina vírtual do CHIP-8\n * @author Roberto Nazareth Guedes\n */\nvar Chip8 = /** @class */ (function () {\n    function Chip8(render) {\n        this._opcode = 0;\n        this._sp = 0;\n        this._pc = 0x200;\n        this._i = 0;\n        this._delayTempo = 0;\n        this._somTempo = 0;\n        this._esperandoInput = false;\n        this._esperandoRegs = 0;\n        this._desenharFlag = false;\n        this._tela = new Array(0x20);\n        this._memoria = new Uint8Array(0x1000);\n        this._stack = new Uint16Array(0x10);\n        this._v = new Uint8Array(0x10);\n        this._teclado = new Uint8Array(0x10);\n        this._ultimaTecla = 0;\n        this._pausado = false;\n        this._step = false;\n        this._renderizador = render;\n        for (var i = 0; i < 0x20; ++i) {\n            this._tela[i] = new Array(0x40);\n            for (var j = 0; j < 0x40; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        for (var i = 0; i < Chip8.MEMORIA_TAMANHO; ++i) {\n            this._memoria[i] = 0;\n        }\n        for (var i = 0; i < this._stack.length; ++i) {\n            this._stack[i] = 0;\n        }\n        for (var i = 0; i < this._v.length; ++i) {\n            this._v[i] = 0;\n        }\n        for (var i = 0; i < this._teclado.length; ++i) {\n            this._teclado[i] = 0;\n        }\n        this.carregarFonte();\n    }\n    /** Reseta o emulador ao seu estado inicial */\n    Chip8.prototype.resetar = function () {\n        this._opcode = 0;\n        this._sp = 0;\n        this._pc = 0x200;\n        this._i = 0;\n        this._delayTempo = 0;\n        this._somTempo = 0;\n        this._esperandoInput = false;\n        this._esperandoRegs = 0;\n        this._desenharFlag = false;\n        this._ultimaTecla = 0;\n        this._pausado = false;\n        this._step = false;\n        for (var i = 0; i < 0x20; ++i) {\n            for (var j = 0; j < 0x40; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        for (var i = 0; i < Chip8.MEMORIA_TAMANHO; ++i) {\n            this._memoria[i] = 0;\n        }\n        for (var i = 0; i < this._stack.length; ++i) {\n            this._stack[i] = 0;\n        }\n        for (var i = 0; i < this._v.length; ++i) {\n            this._v[i] = 0;\n        }\n        for (var i = 0; i < this._teclado.length; ++i) {\n            this._teclado[i] = 0;\n        }\n        this.carregarFonte();\n        Object(_renderizador__WEBPACK_IMPORTED_MODULE_0__[/* renderizar */ "a"])(this._renderizador, this._tela);\n    };\n    /** Pausa o emulador */\n    Chip8.prototype.pausar = function () {\n        this._pausado = true;\n    };\n    /** Dá play no emulador */\n    Chip8.prototype.play = function () {\n        this._pausado = false;\n        this._step = false;\n    };\n    Chip8.prototype.step = function () {\n        if (this._pausado) {\n            this._step = true;\n        }\n    };\n    /**\n     * Carrega um programa na memória\n     * @param buffer Programa a ser carregado na memória\n     */\n    Chip8.prototype.carregarPrograma = function (buffer) {\n        var _this = this;\n        buffer.forEach(function (byte, i) {\n            var pos = i + 0x200;\n            if (pos < Chip8.MEMORIA_TAMANHO) {\n                _this._memoria[pos] = byte;\n            }\n        });\n    };\n    /** Emula um ciclo da CPU */\n    Chip8.prototype.emularCiclo = function () {\n        var _this = this;\n        this.buscarOpcode();\n        if (this._pausado) {\n            if (!this._step) {\n                return;\n            }\n            // executar mais uma instrução mesmo pausado\n            this._step = false;\n        }\n        if (this._esperandoInput) {\n            this._teclado.forEach(function (tecla) {\n                if (tecla !== 0) {\n                    // parar de esperar input se o\n                    // usuário pressionar uma tecla\n                    _this._esperandoInput = false;\n                    _this._v[_this._esperandoRegs] = _this._ultimaTecla;\n                    _this._pc += 2;\n                }\n            });\n            return;\n        }\n        this.executarOpcode();\n        if (this._delayTempo > 0) {\n            --this._delayTempo;\n        }\n        if (this._somTempo > 0) {\n            if (this._somTempo === 1) {\n                // BEEP\n            }\n            --this._somTempo;\n        }\n    };\n    /** Carrega a fonte na memória */\n    Chip8.prototype.carregarFonte = function () {\n        var fonte = [\n            0xF0, 0x90, 0x90, 0x90, 0xF0,\n            0x20, 0x60, 0x20, 0x20, 0x70,\n            0xF0, 0x10, 0xF0, 0x80, 0xF0,\n            0xF0, 0x10, 0xF0, 0x10, 0xF0,\n            0x90, 0x90, 0xF0, 0x10, 0x10,\n            0xF0, 0x80, 0xF0, 0x10, 0xF0,\n            0xF0, 0x80, 0xF0, 0x90, 0xF0,\n            0xF0, 0x10, 0x20, 0x40, 0x40,\n            0xF0, 0x90, 0xF0, 0x90, 0xF0,\n            0xF0, 0x90, 0xF0, 0x10, 0xF0,\n            0xF0, 0x90, 0xF0, 0x90, 0x90,\n            0xE0, 0x90, 0xE0, 0x90, 0xE0,\n            0xF0, 0x80, 0x80, 0x80, 0xF0,\n            0xE0, 0x90, 0x90, 0x90, 0xE0,\n            0xF0, 0x80, 0xF0, 0x80, 0xF0,\n            0xF0, 0x80, 0xF0, 0x80, 0x80,\n        ];\n        for (var i = 0; i < 80; ++i) {\n            this._memoria[i] = fonte[i];\n        }\n    };\n    /**\n     * Busca o opcode de acordo com o endereço atual do contador de programa\n     * e atribui este valor para a propriedade "opcode" da cpu.\n     */\n    Chip8.prototype.buscarOpcode = function () {\n        // opcodes tem 2 bytes (16 bits), então, precisamos juntar dois bytes.\n        // Por exemplo: se o valor do primeiro byte for A2, e o do segundo for F0, \n        // então o opcode será A2F0.\n        // "memoria[pc] << 8" cria 4 zeros no numero (em binario), e depois a operação\n        // bitwise OR junta os 2 numeros\n        var primeiro = this._memoria[this._pc];\n        var segundo = this._memoria[this._pc + 1];\n        this._opcode = (primeiro << 8) | segundo;\n    };\n    Chip8.prototype.setPixel = function (pos_x, pos_y, fim_sprite) {\n        var colisao = 0;\n        var sprite = this._memoria.slice(this._i, fim_sprite + 1);\n        for (var i = 0; i < sprite.length - 1; ++i) {\n            for (var j = 0; j < 8; ++j) {\n                var x = (pos_x + j) % 64;\n                var y = (pos_y + i) % 32;\n                if ((sprite[i] & (0x80 >> j)) !== 0) {\n                    if (this._tela[y][x] === 1) {\n                        colisao = 1;\n                    }\n                    this._tela[y][x] ^= 1;\n                    if (this._tela[y][x] !== 0) {\n                        this._renderizador.mudarCor(255, 255, 255);\n                    }\n                    else {\n                        this._renderizador.mudarCor(57, 50, 71);\n                    }\n                    //this._renderizador.desenharQuadrado(x * 8, y * 8, 8, 8);\n                }\n            }\n        }\n        this._desenharFlag = true;\n        return colisao;\n    };\n    /** Identifica e executa o opcode */\n    Chip8.prototype.executarOpcode = function () {\n        switch (this._opcode & 0xF000) {\n            case 0x0000:\n                this.executarOp_0xxx();\n                break;\n            case 0x1000:\n                this.op_1nnn_jp();\n                break;\n            case 0x2000:\n                this.op_2nnn_call();\n                break;\n            case 0x3000:\n                this.op_3xkk_se();\n                break;\n            case 0x4000:\n                this.op_4xkk_sne();\n                break;\n            case 0x5000:\n                this.op_5xy0_se();\n                break;\n            case 0x6000:\n                this.op_6xkk_ld();\n                break;\n            case 0x7000:\n                this.op_7xkk_add();\n                break;\n            case 0x8000:\n                this.executarOp_8xxx();\n                break;\n            case 0x9000:\n                this.op_9xy0_sne();\n                break;\n            case 0xA000:\n                this.op_annn_ld();\n                break;\n            case 0xB000:\n                this.op_bnnn_jmp();\n                break;\n            case 0xC000:\n                this.op_cxkk_rnd();\n                break;\n            case 0xD000:\n                this.op_dxyn_draw();\n                break;\n            case 0xE000:\n                this.executarOp_exxx();\n                break;\n            case 0xF000:\n                this.executarOp_fxxx();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com 0 */\n    Chip8.prototype.executarOp_0xxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x00EE:\n                this.op_00ee_ret();\n                break;\n            case 0x00E0:\n                this.op_00e0_clr();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com 8 */\n    Chip8.prototype.executarOp_8xxx = function () {\n        switch (this._opcode & 0x000F) {\n            case 0x0000:\n                this.op_8xy0_ld();\n                break;\n            case 0x0001:\n                this.op_8xy1_or();\n                break;\n            case 0x0002:\n                this.op_8xy2_and();\n                break;\n            case 0x0003:\n                this.op_8xy3_xor();\n                break;\n            case 0x0004:\n                this.op_8xy4_add();\n                break;\n            case 0x0005:\n                this.op_8xy5_sub();\n                break;\n            case 0x0006:\n                this.op_8x06_shr();\n                break;\n            case 0x0007:\n                this.op_8xy7_subn();\n                break;\n            case 0x000E:\n                this.op_8x0e_shl();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com E */\n    Chip8.prototype.executarOp_exxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x009E:\n                this.op_ex9e_skp();\n                break;\n            case 0x00A1:\n                this.op_exa1_sknp();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com F */\n    Chip8.prototype.executarOp_fxxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x0007:\n                this.op_fx07_ld();\n                break;\n            case 0x000A:\n                this.op_fx0a_ld();\n                break;\n            case 0x0015:\n                this.op_fx15_ld();\n                break;\n            case 0x0018:\n                this.op_fx18_ld();\n                break;\n            case 0x001E:\n                this.op_fx1e_add();\n                break;\n            case 0x0029:\n                this.op_fx29_ld();\n                break;\n            case 0x0033:\n                this.op_fx33_ld();\n                break;\n            case 0x0055:\n                this.op_fx55_ld();\n                break;\n            case 0x0065:\n                this.op_fx65_ld();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /**\n     * CLR\n     * Limpa a tela\n     */\n    Chip8.prototype.op_00e0_clr = function () {\n        for (var i = 0; i < 32; ++i) {\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        this._renderizador.limparTela();\n        Object(_renderizador__WEBPACK_IMPORTED_MODULE_0__[/* renderizar */ "a"])(this._renderizador, this._tela);\n        this._desenharFlag = true;\n        this._pc += 2;\n    };\n    /**\n     * Opcode 00EE, returna de uma subrotina\n     */\n    Chip8.prototype.op_00ee_ret = function () {\n        this._pc = this._stack[this._sp - 1];\n        this._sp -= 1;\n        this._pc += 2;\n    };\n    /**\n     * JP endereco\n     * Opcode 1nnn: pula o programa para um endereço, onde nnn é o endereço\n     */\n    Chip8.prototype.op_1nnn_jp = function () {\n        this._pc = this.nnn;\n    };\n    /**\n     * Opcode 2nnn: pula o programa para uma subrotina, onde nnn é o endereço da subrotina.\n     */\n    Chip8.prototype.op_2nnn_call = function () {\n        // guarda o endereço atual do programa na stack\n        this._stack[this._sp] = this._pc;\n        this._sp += 1;\n        this._pc = this.nnn;\n    };\n    /**\n     * Opcode 3xkk: pula a proxima instrução se kk for igual a Vx\n     */\n    Chip8.prototype.op_3xkk_se = function () {\n        if (this._v[this.x] === this.kk) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * Opcode 4xkk: pula a proxima instrução se kk for diferente de Vx\n     */\n    Chip8.prototype.op_4xkk_sne = function () {\n        if (this._v[this.x] !== this.kk) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * Opcode 5xy0: pula a proxima instrução se Vx for igual a Vy\n     */\n    Chip8.prototype.op_5xy0_se = function () {\n        if (this._v[this.x] === this._v[this.y]) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD Vx, byte\n     * Opcode 6xkk: guarda o valor kk em Vx\n     */\n    Chip8.prototype.op_6xkk_ld = function () {\n        this._v[this.x] = this.kk;\n        this._pc += 2;\n    };\n    /**\n     * ADD Vx, byte\n     * Opcode 7xkk: adiciona o valor kk ao registrador Vx\n     */\n    Chip8.prototype.op_7xkk_add = function () {\n        this._v[this.x] += this.kk;\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, Vy\n     * opcode 8xy0: salva o valor de Vy no registrador Vx\n     */\n    Chip8.prototype.op_8xy0_ld = function () {\n        this._v[this.x] = this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * OR Vx, Vy\n     * opcode 8xy1: performa uma uma operação bitwise OR\n     * nos valores de Vx e Vy, e salva o resultado no\n     * registrador Vx\n     */\n    Chip8.prototype.op_8xy1_or = function () {\n        this._v[this.x] |= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * AND Vx, Vy\n     * opcode 8xy2: performa uma uma operação bitwise AND\n     * nos valores de Vx e Vy, e salva o resultado no\n     * registrador Vx\n     */\n    Chip8.prototype.op_8xy2_and = function () {\n        this._v[this.x] &= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n    * XOR Vx, Vy\n    * opcode 8xy3: performa uma uma operação bitwise XOR (OR exclusivo)\n    * nos valores de Vx e Vy, e salva o resultado no\n    * registrador Vx\n    */\n    Chip8.prototype.op_8xy3_xor = function () {\n        this._v[this.x] ^= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * ADD Vx, Vy\n     * opcode 8xy4: adiciona o valor de Vy a Vx e ativa a carry flag\n     * do registrador VF caso o resultado seja maior do que 255\n     */\n    Chip8.prototype.op_8xy4_add = function () {\n        this._v[this.x] += this._v[this.y];\n        this._v[0xF] = +(this._v[this.x] > 255);\n        this._pc += 2;\n    };\n    /**\n     * SUB Vx, Vy\n     * opcode 8xy5: subtrai Vx por Vy e guarda o resultado em Vx.\n     * Caso Vx seja maior que Vy, VF é igual a 1, e caso o contrario\n     * é igual a 0\n     */\n    Chip8.prototype.op_8xy5_sub = function () {\n        this._v[0xF] = +(this._v[this.x] > this._v[this.y]);\n        this._v[this.x] -= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * SHR Vx\n     * opcode 8x06: desloca o número uma casa (em binário) para a direita (right shift).\n     * O bit menos significativo do valor original de Vx é salvo no\n     * registrador VF\n     */\n    Chip8.prototype.op_8x06_shr = function () {\n        var vx = this._v[this.x];\n        this._v[0xF] = 0x1 & vx;\n        this._v[this.x] = vx >> 1;\n        this._pc += 2;\n    };\n    /**\n     * SUBN Vx, Vy\n     * opcode 8xy7: subtrai Vy por Vx e guarda o resultado em Vx.\n     * Caso Vx seja maior que Vy, VF é igual a 1, e caso o contrario\n     * é igual a 0\n     */\n    Chip8.prototype.op_8xy7_subn = function () {\n        var vx = this._v[this.x];\n        var vy = this._v[this.y];\n        this._v[0xF] = vy > vx ? 1 : 0;\n        this._v[this.x] = vy - vx;\n        this._pc += 2;\n    };\n    /**\n     * SHL Vx\n     * opcode 8x0E: desloca o número uma casa (em binário) para a esquerda (left shift).\n     * O bit mais significativo do valor original de Vx é salvo no\n     * registrador VF\n     */\n    Chip8.prototype.op_8x0e_shl = function () {\n        var vx = this._v[this.x];\n        this._v[0xF] = vx >> 7;\n        this._v[this.x] = vx << 1;\n        this._pc += 2;\n    };\n    /**\n     * SNE Vx, Vy\n     * Pula a proxima instrução se Vx for diferente de Vy\n     */\n    Chip8.prototype.op_9xy0_sne = function () {\n        if (this._v[this.x] !== this._v[this.y]) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD I, addr\n     * Atribui o valor de addr para I\n     */\n    Chip8.prototype.op_annn_ld = function () {\n        this._i = this.nnn;\n        this._pc += 2;\n    };\n    /**\n     * JMP V0, endereco\n     * Pula para o endereço nnn + V0\n     */\n    Chip8.prototype.op_bnnn_jmp = function () {\n        this._pc = this._v[this.x] + this.nnn;\n    };\n    /**\n     * RND Vx, byte\n     * Vx = byte aleatório & kk\n     */\n    Chip8.prototype.op_cxkk_rnd = function () {\n        this._v[this.x] = (Math.random() * 0x100) & this.kk;\n        this._pc += 2;\n    };\n    /**\n     * Desenha um sprite na coordenada (Vx, Vy), com 8 pixels de largura e N de altura\n     */\n    Chip8.prototype.op_dxyn_draw = function () {\n        var n = this._opcode & 0x000F;\n        var fim_sprite = this._i + n;\n        this._v[0xF] = this.setPixel(this._v[this.x], this._v[this.y], fim_sprite);\n        this._pc += 2;\n    };\n    /**\n     * SKP Vx\n     * pula a próxima instrução se a tecla com o valor de Vx estiver sendo pressionada\n     */\n    Chip8.prototype.op_ex9e_skp = function () {\n        var tecla = this._v[this.x];\n        if (this._teclado[tecla] !== 0) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * SKNP Vx\n     * pula a próxima instrução se a tecla com o valor de Vx não estiver sendo pressionada\n     */\n    Chip8.prototype.op_exa1_sknp = function () {\n        var tecla = this._v[this.x];\n        if (this._teclado[tecla] === 0) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD Vx, K\n     * Espera o usuário pressionar uma tecla, e atribui o valor a Vx\n     */\n    Chip8.prototype.op_fx0a_ld = function () {\n        this._esperandoInput = true;\n        this._esperandoRegs = this.x;\n        //this._pc += 2;\n    };\n    /**\n     * LD Vx, DELAY_TIMER\n     * Atribui o valor do temporizador de delay ao Vx\n     */\n    Chip8.prototype.op_fx07_ld = function () {\n        this._v[this.x] = this._delayTempo;\n        this._pc += 2;\n    };\n    /**\n     * LD DELAY_TIMER, Vx\n     * Atribui o valor de Vx ao temporizador de delay\n     */\n    Chip8.prototype.op_fx15_ld = function () {\n        this._delayTempo = this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * LD SOUND_TIMER, Vx\n     * Atribui o valor de Vx ao temporizador de som\n     */\n    Chip8.prototype.op_fx18_ld = function () {\n        this._somTempo = this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * ADD I, Vx\n     * I = I + Vx\n     */\n    Chip8.prototype.op_fx1e_add = function () {\n        this._i += this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * LD F, Vx\n     * Atribui ao I o endereço do sprite correspondente à Vx\n     */\n    Chip8.prototype.op_fx29_ld = function () {\n        this._i = this._v[this.x] * Chip8.FONTE_LARGURA;\n        this._pc += 2;\n    };\n    /**\n     * LD B, Vx\n     * opcode Fx33: Guarda a representação em codificação binária decimal (BCD)\n     * do valor do registrador Vx. O digito na casa das centenas será salvo no\n     * endereço "i" (o registrador de index), a casa das dezenas será salva no\n     * endereço "i + 1", e o digito da casa das unidades erá salvo em "i + 2"\n     */\n    Chip8.prototype.op_fx33_ld = function () {\n        var valor = this._v[this.x];\n        this._memoria[this._i] = valor / 100;\n        this._memoria[this._i + 1] = (valor / 10) % 10;\n        this._memoria[this._i + 2] = (valor % 100) % 10;\n        this._pc += 2;\n    };\n    /**\n     * LD [I], Vx\n     * Guarda os valores de V0 à Vx na memória a partir do endereço I\n     */\n    Chip8.prototype.op_fx55_ld = function () {\n        for (var i = 0; i <= this.x; i++) {\n            this._memoria[i + this._i] = this._v[i];\n        }\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, [I]\n     * Preenche os registradores de V0 à Vx com valores na memória a partir do endereço I\n     */\n    Chip8.prototype.op_fx65_ld = function () {\n        for (var i = 0; i <= this.x; i++) {\n            this._v[i] = this._memoria[i + this._i];\n        }\n        this._pc += 2;\n    };\n    /** Registra que uma tecla foi apertada */\n    Chip8.prototype.teclaBaixo = function (tecla) {\n        this._teclado[tecla] = 1;\n        this._ultimaTecla = tecla;\n    };\n    /** Registra que uma tecla foi solta */\n    Chip8.prototype.teclaCima = function (tecla) {\n        this._teclado[tecla] = 0;\n    };\n    Object.defineProperty(Chip8.prototype, "v", {\n        /** Os registradores da CPU */\n        get: function () {\n            return this._v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "pc", {\n        /** Contador de programa */\n        get: function () {\n            return this._pc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "opcode", {\n        get: function () {\n            return this._opcode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "opcodeHex", {\n        get: function () {\n            var hex = this._opcode.toString(16);\n            return \'0x\' + hex.toUpperCase();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "nnn", {\n        /** As 3 últimas casas (em hexadecimal) do opcode */\n        get: function () {\n            return this._opcode & 0x0FFF;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "kk", {\n        /** As 2 últimas casas (em hexadecimal) do opcode */\n        get: function () {\n            return this._opcode & 0x00FF;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "x", {\n        /** O número na segunda casa (da esquerda pra direita em hexadecimal) do opcode */\n        get: function () {\n            return (this._opcode & 0x0F00) >> 8;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "y", {\n        /** O número na terceira casa (da esquerda pra direita em hexadecimal) do opcode */\n        get: function () {\n            return (this._opcode & 0x00F0) >> 4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "desenharFlag", {\n        get: function () {\n            return this._desenharFlag;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "tela", {\n        get: function () {\n            return this._tela;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "memoria", {\n        get: function () {\n            return this._memoria;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "teclado", {\n        get: function () {\n            return this._teclado;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Chip8.MEMORIA_TAMANHO = 0x1000;\n    Chip8.FONTE_LARGURA = 5;\n    return Chip8;\n}());\n/* harmony default export */ __webpack_exports__["a"] = (Chip8);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return renderizar; });\n/**\n * @fileoverview Define uma interface para o renderizador, e também\n * uma função para renderizar os dados da tela da máquina virtual\n * @author Roberto Nazareth Guedes\n */\nfunction renderizar(render, tela) {\n    render.limparTela();\n    for (var y = 0; y < 32; ++y) {\n        for (var x = 0; x < 64; ++x) {\n            var pixel = tela[y][x];\n            if (pixel !== 0) {\n                render.mudarCor(255, 255, 255);\n            }\n            else {\n                render.mudarCor(57, 50, 71);\n            }\n            render.desenharQuadrado(x * 8, y * 8, 8, 8);\n        }\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyaXphZG9yLnRzPzU4ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1CQUFtQixRQUFRO0FBQzNCLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmUgdW1hIGludGVyZmFjZSBwYXJhIG8gcmVuZGVyaXphZG9yLCBlIHRhbWLDqW1cbiAqIHVtYSBmdW7Dp8OjbyBwYXJhIHJlbmRlcml6YXIgb3MgZGFkb3MgZGEgdGVsYSBkYSBtw6FxdWluYSB2aXJ0dWFsXG4gKiBAYXV0aG9yIFJvYmVydG8gTmF6YXJldGggR3VlZGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJpemFyKHJlbmRlciwgdGVsYSkge1xuICAgIHJlbmRlci5saW1wYXJUZWxhKCk7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCAzMjsgKyt5KSB7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNjQ7ICsreCkge1xuICAgICAgICAgICAgdmFyIHBpeGVsID0gdGVsYVt5XVt4XTtcbiAgICAgICAgICAgIGlmIChwaXhlbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJlbmRlci5tdWRhckNvcigyNTUsIDI1NSwgMjU1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbmRlci5tdWRhckNvcig1NywgNTAsIDcxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlci5kZXNlbmhhclF1YWRyYWRvKHggKiA4LCB5ICogOCwgOCwgOCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * @fileoverview Define uma implementação da interface\n * IRenderizador, que renderiza usando WebGL\n * @author Roberto Nazareth Guedes\n */\nvar RenderizadorWebGL = /** @class */ (function () {\n    function RenderizadorWebGL(gl) {\n        this.PIXEL_TAMANHO = 8;\n        this.LARGURA = 64;\n        this.ALTURA = 32;\n        this.gl = gl;\n        // definição do código fonte do shader\n        var v_source = \"\\n            precision mediump float;\\n            \\n            attribute vec3 a_pos;\\n            attribute vec2 a_tex_coord;\\n            varying vec2 v_tex_coord;\\n\\n            void main() {\\n                gl_Position = vec4(a_pos, 1.0);\\n                v_tex_coord = a_tex_coord;\\n            }\\n        \";\n        var f_source = \"\\n            precision mediump float;\\n\\n            uniform sampler2D u_textura;\\n            varying vec2 v_tex_coord;\\n\\n            void main() {\\n                gl_FragColor = texture2D(u_textura, v_tex_coord);\\n            }\\n        \";\n        // compila o shader\n        this.shader = this.compilarShader(v_source, f_source);\n        // definição dos dados que vão ser usados nos buffers da GPU\n        // coordenadas da textura, de 0 à 1\n        var tex_coords = [\n            1.0, 1.0,\n            1.0, 0.0,\n            0.0, 0.0,\n            0.0, 1.0,\n        ];\n        // posição dos vértices\n        var posicao = [\n            1.0, 1.0, 0.0,\n            1.0, -1.0, 0.0,\n            -1.0, -1.0, 0.0,\n            -1.0, 1.0, 0.0,\n        ];\n        // os indices do retangulo, que é formado por 2 triangulos\n        var indices = [\n            0, 1, 3,\n            1, 2, 3,\n        ];\n        // criação dos buffers na GPU\n        var tex_coord_buf = this.gl.createBuffer();\n        var posicao_buf = this.gl.createBuffer();\n        var indices_buf = this.gl.createBuffer();\n        if (tex_coord_buf === null) {\n            throw new Error('Erro ao criar tex_coord_buf');\n        }\n        else if (posicao_buf === null) {\n            throw new Error('Erro ao criar posicaoBuffer');\n        }\n        else if (indices_buf === null) {\n            throw new Error('Erro ao criar indicesBuffer');\n        }\n        this.buffers = {\n            tex_coord: tex_coord_buf,\n            posicao: posicao_buf,\n            indices: indices_buf,\n        };\n        // aqui, atribuimos os dados àos seus referentes buffers\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers.posicao);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(posicao), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers.tex_coord);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(tex_coords), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffers.indices);\n        this.gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n        // aqui, buscamos as variaveis atributos e uniformes do shader \n        var u_textura = gl.getUniformLocation(this.shader, 'u_textura');\n        if (u_textura === null) {\n            throw new Error('erro ao achar u_textura');\n        }\n        this.uniformes = {\n            textura: u_textura,\n        };\n        this.atributos = {\n            posicao: gl.getAttribLocation(this.shader, 'a_pos'),\n            tex_coord: gl.getAttribLocation(this.shader, 'a_tex_coord'),\n        };\n        var textura = this.gl.createTexture();\n        if (textura === null) {\n            throw new Error('Erro ao criar textura');\n        }\n        this.textura = textura;\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        this.limparTela();\n    }\n    /** Checa se o navegador suporta WebGL */\n    RenderizadorWebGL.checarSuporte = function () {\n        try {\n            var canvas = document.createElement('canvas');\n            //@ts-ignore\n            return !!window.WebGLRenderingContext &&\n                canvas.getContext('webgl') !== null &&\n                canvas.getContext('experimental-webgl') !== null;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    RenderizadorWebGL.prototype.mudarCor = function (r, g, b) {\n        //this._cor = [r/255.0, g/255.0, b/255.0, 1.0];\n        //this._gl.uniform4fv(this._u_corLocal, [r/255.0, g/255.0, b/255.0, 1.0]);\n    };\n    RenderizadorWebGL.prototype.limparTela = function () {\n        this.gl.clearColor(0, 0, 0, 0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    };\n    RenderizadorWebGL.prototype.desenharQuadrado = function (x, y, l, a) {\n    };\n    RenderizadorWebGL.prototype.encerrarFrame = function () {\n    };\n    /** Cria e renderiza uma textura baseada no buffer da tela */\n    RenderizadorWebGL.prototype.desenharTela = function (tela) {\n        this.gl.useProgram(this.shader);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.textura);\n        //this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.LARGURA, this.ALTURA, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.criarTexturaRGBA(tela));\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        this.gl.enableVertexAttribArray(this.atributos.tex_coord);\n        this.gl.enableVertexAttribArray(this.atributos.posicao);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers.tex_coord);\n        this.gl.vertexAttribPointer(this.atributos.tex_coord, 2, this.gl.FLOAT, false, 0, 0);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers.posicao);\n        this.gl.vertexAttribPointer(this.atributos.posicao, 3, this.gl.FLOAT, false, 0, 0);\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.uniform1i(this.uniformes.textura, 0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.textura);\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        this.gl.clearDepth(1.0);\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.depthFunc(this.gl.LEQUAL);\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.buffers.indices);\n        this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n    };\n    /** Transforma a tela em uma textura RGBA */\n    RenderizadorWebGL.prototype.criarTexturaRGBA = function (tela) {\n        var textura = [];\n        for (var y = this.ALTURA - 1; y >= 0; --y) {\n            for (var x = 0; x < this.LARGURA; ++x) {\n                var pixel = tela[y][x];\n                // cor branca\n                var cor = [255, 255, 255, 255];\n                if (pixel === 0) {\n                    // cor roxa\n                    cor = [57, 50, 71, 255];\n                }\n                for (var _i = 0, cor_1 = cor; _i < cor_1.length; _i++) {\n                    var valor = cor_1[_i];\n                    textura.push(valor);\n                }\n            }\n        }\n        return new Uint8Array(textura);\n    };\n    /** Compila o programa que irá rodar na placa de video para desenhar a textura do buffer da tela\n     * @returns O programa compilado\n     */\n    RenderizadorWebGL.prototype.compilarShader = function (vSource, fSource) {\n        var vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);\n        if (vertexShader === null) {\n            throw new Error('Erro ao criar shader');\n        }\n        this.gl.shaderSource(vertexShader, vSource);\n        this.gl.compileShader(vertexShader);\n        // checa erros de compilação\n        if (!this.gl.getShaderParameter(vertexShader, this.gl.COMPILE_STATUS)) {\n            var mensagem = this.gl.getShaderInfoLog(vertexShader);\n            if (mensagem !== null) {\n                throw new Error(mensagem);\n            }\n        }\n        var fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);\n        if (fragmentShader === null) {\n            throw new Error('Erro ao criar shader');\n        }\n        this.gl.shaderSource(fragmentShader, fSource);\n        this.gl.compileShader(fragmentShader);\n        // checa erros de compilação\n        if (!this.gl.getShaderParameter(fragmentShader, this.gl.COMPILE_STATUS)) {\n            var mensagem = this.gl.getShaderInfoLog(fragmentShader);\n            if (mensagem !== null) {\n                throw new Error(mensagem);\n            }\n        }\n        var programa = this.gl.createProgram();\n        if (programa === null) {\n            throw new Error('Erro ao criar programa');\n        }\n        this.gl.attachShader(programa, vertexShader);\n        this.gl.attachShader(programa, fragmentShader);\n        this.gl.linkProgram(programa);\n        // checa erros de linkagem\n        if (!this.gl.getProgramParameter(programa, this.gl.LINK_STATUS)) {\n            var mensagem = this.gl.getShaderInfoLog(vertexShader);\n            if (mensagem !== null) {\n                throw new Error(mensagem);\n            }\n        }\n        return programa;\n    };\n    return RenderizadorWebGL;\n}());\n/* harmony default export */ __webpack_exports__[\"a\"] = (RenderizadorWebGL);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return traduzirInput; });\nvar teclas = {\n    49: 0x1,\n    50: 0x2,\n    51: 0x3,\n    52: 0xC,\n    65: 0x7,\n    67: 0xB,\n    68: 0x9,\n    69: 0x6,\n    70: 0xE,\n    81: 0x4,\n    82: 0xD,\n    83: 0x8,\n    86: 0xF,\n    87: 0x5,\n    88: 0x0,\n    90: 0xA,\n};\n/**\n * Traduz o valor de uma tecla do PC para a tecla\n * correspondente no CHIP-8\n * @param tecla_pc O valor da tecla do PC\n * @returns O valor convertido\n */\nfunction traduzirInput(tecla_pc) {\n    var tecla_chip8 = teclas[tecla_pc];\n    // se o valor não estiver no hashmap\n    if (typeof tecla_chip8 === 'undefined') {\n        throw new Error('tecla não encontrada');\n    }\n    return tecla_chip8;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5wdXQudHM/ZmYyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ZWNsYXMgPSB7XG4gICAgNDk6IDB4MSxcbiAgICA1MDogMHgyLFxuICAgIDUxOiAweDMsXG4gICAgNTI6IDB4QyxcbiAgICA2NTogMHg3LFxuICAgIDY3OiAweEIsXG4gICAgNjg6IDB4OSxcbiAgICA2OTogMHg2LFxuICAgIDcwOiAweEUsXG4gICAgODE6IDB4NCxcbiAgICA4MjogMHhELFxuICAgIDgzOiAweDgsXG4gICAgODY6IDB4RixcbiAgICA4NzogMHg1LFxuICAgIDg4OiAweDAsXG4gICAgOTA6IDB4QSxcbn07XG4vKipcbiAqIFRyYWR1eiBvIHZhbG9yIGRlIHVtYSB0ZWNsYSBkbyBQQyBwYXJhIGEgdGVjbGFcbiAqIGNvcnJlc3BvbmRlbnRlIG5vIENISVAtOFxuICogQHBhcmFtIHRlY2xhX3BjIE8gdmFsb3IgZGEgdGVjbGEgZG8gUENcbiAqIEByZXR1cm5zIE8gdmFsb3IgY29udmVydGlkb1xuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhZHV6aXJJbnB1dCh0ZWNsYV9wYykge1xuICAgIHZhciB0ZWNsYV9jaGlwOCA9IHRlY2xhc1t0ZWNsYV9wY107XG4gICAgLy8gc2UgbyB2YWxvciBuw6NvIGVzdGl2ZXIgbm8gaGFzaG1hcFxuICAgIGlmICh0eXBlb2YgdGVjbGFfY2hpcDggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGVjbGEgbsOjbyBlbmNvbnRyYWRhJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZWNsYV9jaGlwODtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9), __webpack_require__(10)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);\n/* harmony import */ var _chip8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _renderizadorCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);\n/* harmony import */ var _renderizadorWebGL__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);\n/* harmony import */ var _disassembler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7);\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);\n/**\n * @author Roberto Nazareth Guedes\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n/**\n * Remove os elementos filhos de um div\n * @param div O div a ter os elementos filhos removidos\n */\nfunction removerFilhos(div) {\n    while (div.firstChild) {\n        div.removeChild(div.firstChild);\n    }\n}\n/** Checa se o número é par */\nfunction par(num) {\n    return num % 2 === 0;\n}\n/**\n* Abstrai as interações da máquina virtual com o HTML\n*/\nvar UI = /** @class */ (function () {\n    function UI() {\n        this._jogoCarregado = false;\n        this._arquivoEnviado = false;\n        this._dobrarVelocidade = false;\n        this._assembly = {};\n        var divInstrucoes = document.querySelector('div#instrucoes');\n        if (divInstrucoes !== null) {\n            this._divInstrucoes = divInstrucoes;\n        }\n        else {\n            throw new Error('Div de instruções não encontrado');\n        }\n        var canvas = document.querySelector('canvas#chip-8');\n        if (canvas === null) {\n            throw new Error('Erro ao buscar canvas');\n        }\n        var select = document.querySelector('select#rom-select');\n        if (select !== null) {\n            this._select = select;\n        }\n        else {\n            throw new Error('Erro: elemento select não encontrado');\n        }\n        var resetarBtn = document.querySelector('#chip-8-resetar');\n        var pauseBtn = document.querySelector('#chip-8-pause');\n        var playBtn = document.querySelector('#chip-8-play');\n        var stepBtn = document.querySelector('#chip-8-step');\n        if (pauseBtn === null || playBtn === null ||\n            stepBtn === null || resetarBtn === null) {\n            throw new Error('Botões não encontrados');\n        }\n        else {\n            this._resetarBtn = resetarBtn;\n            this._pauseBtn = pauseBtn;\n            this._playBtn = playBtn;\n            this._stepBtn = stepBtn;\n        }\n        var input = document.querySelector('input#rom-arquivo');\n        if (input !== null) {\n            this._input = input;\n        }\n        else {\n            throw new Error('Erro: elemento input não encontrado');\n        }\n        if (_renderizadorWebGL__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].checarSuporte()) {\n            console.log('usando webgl');\n            var ctx = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n            if (ctx === null) {\n                throw new Error('Erro ao buscar contexto do canvas');\n            }\n            this._renderizador = new _renderizadorWebGL__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"](ctx);\n            this._chip8 = new _chip8__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](this._renderizador);\n        }\n        else {\n            console.log('usando canvas2d');\n            var ctx = canvas.getContext('2d');\n            if (ctx === null) {\n                throw new Error('Erro ao buscar contexto do canvas');\n            }\n            this._renderizador = new _renderizadorCanvas__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](ctx);\n            this._chip8 = new _chip8__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](this._renderizador);\n        }\n        this.registrarEventos();\n    }\n    /**\n    * Carrega um arquivo na máquina virtual\n    * @param arquivo O arquivo\n    */\n    UI.prototype.enviarPrograma = function (arquivo) {\n        /**\n         * Usado para não entrar em conflito com\n         * o 'this' da função callback do FileReader\n         */\n        var self = this;\n        var leitor = new FileReader();\n        leitor.onload = function () {\n            if (this.result === null || typeof this.result === 'string') {\n                throw new Error('Erro ao ler arquivo');\n            }\n            if (self._jogoCarregado) {\n                self._chip8.resetar();\n            }\n            var programa = new Uint8Array(this.result);\n            self._chip8.carregarPrograma(programa);\n            self._assembly = Object(_disassembler__WEBPACK_IMPORTED_MODULE_4__[/* decodificarPrograma */ \"a\"])(self._chip8.memoria);\n            self._jogoCarregado = true;\n        };\n        if (arquivo instanceof Blob) {\n            leitor.readAsArrayBuffer(arquivo);\n        }\n    };\n    /**\n     * Adiciona elementos 'p' com pseudo-assembly dos opcodes\n     * próximos ao elemento atual\n     */\n    UI.prototype.renderizarAssembly = function () {\n        var instrucoes = [];\n        var inicio = this._chip8.pc - 6;\n        for (var i = 0; i < 12; ++i) {\n            var endereco = (i + inicio);\n            var enderHex = endereco.toString(16).toUpperCase();\n            var instrucao = this._assembly[endereco];\n            // só mostrar a instrução caso tanto o pc quanto \n            // o endereço forem pares ou forem impares\n            if ((par(this._chip8.pc) && par(endereco)) ||\n                (!par(this._chip8.pc) && !par(endereco))) {\n                if (typeof instrucao === 'string') {\n                    if (endereco === this._chip8.pc) {\n                        instrucoes.push(\"->  0x\" + enderHex + \": \" + instrucao);\n                    }\n                    else {\n                        instrucoes.push(\"0x\" + enderHex + \": \" + instrucao);\n                    }\n                }\n            }\n        }\n        removerFilhos(this._divInstrucoes);\n        for (var _i = 0, instrucoes_1 = instrucoes; _i < instrucoes_1.length; _i++) {\n            var instrucao = instrucoes_1[_i];\n            var p = document.createElement('p');\n            p.innerHTML = instrucao;\n            p.classList.add('instrucao');\n            if (instrucao.startsWith('->')) {\n                p.classList.add('atual');\n            }\n            this._divInstrucoes.appendChild(p);\n        }\n    };\n    /** Registra os eventos aos elementos */\n    UI.prototype.registrarEventos = function () {\n        var _this = this;\n        this._select.onchange = function (e) { return _this.eventoCarregarROMSelect(); };\n        this._resetarBtn.onclick = function (e) { return _this.eventoResetarBtn(e); };\n        this._pauseBtn.onclick = function (e) { return _this.eventoPauseBtn(e); };\n        this._playBtn.onclick = function (e) { return _this.eventoPlayBtn(e); };\n        this._stepBtn.onclick = function (e) { return _this.eventoStepBtn(e); };\n        // busca um array com os botões do teclado virtual\n        var tecladoBotoes = document.querySelectorAll('div#teclado-virtual .teclado-btn');\n        if (tecladoBotoes === null) {\n            throw new Error('Botões não encontrados');\n        }\n        tecladoBotoes.forEach(function (teclaBtn) {\n            if (teclaBtn instanceof HTMLButtonElement) {\n                // transforma o valor HEX do botão em um número\n                var tecla_1 = parseInt(teclaBtn.innerHTML, 16);\n                if (isNaN(tecla_1)) {\n                    return;\n                }\n                // evento que registra que o usuário pressionou uma tecla\n                teclaBtn.onmousedown = function (e) { return _this._chip8.teclaBaixo(tecla_1); };\n                teclaBtn.ontouchstart = function (e) { return _this._chip8.teclaBaixo(tecla_1); };\n                // eveto que registra que o usuário soltou uma tecla\n                teclaBtn.onmouseleave = function (e) { return _this._chip8.teclaCima(tecla_1); };\n                teclaBtn.onmouseup = function (e) { return _this._chip8.teclaCima(tecla_1); };\n                teclaBtn.ontouchend = function (e) { return _this._chip8.teclaCima(tecla_1); };\n            }\n        });\n        document.addEventListener('keydown', function (e) {\n            try {\n                _this._chip8.teclaBaixo(Object(_input__WEBPACK_IMPORTED_MODULE_5__[/* traduzirInput */ \"a\"])(e.keyCode));\n            }\n            catch (e) {\n            }\n        });\n        document.addEventListener('keyup', function (e) {\n            try {\n                _this._chip8.teclaCima(Object(_input__WEBPACK_IMPORTED_MODULE_5__[/* traduzirInput */ \"a\"])(e.keyCode));\n            }\n            catch (e) {\n            }\n        });\n        var self = this;\n        this._input.addEventListener('change', function () {\n            if (this.files === null) {\n                window.alert('Erro ao ler arquivo');\n                return;\n            }\n            self._chip8.resetar();\n            self.enviarPrograma(this.files[0]);\n            self._dobrarVelocidade = false;\n            self._pauseBtn.disabled = false;\n            self._playBtn.disabled = true;\n            self._stepBtn.disabled = true;\n            self._arquivoEnviado = true;\n        });\n    };\n    UI.prototype.eventoCarregarROMSelect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var romNome, resposta, arquivo, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        romNome = this._select.options[this._select.selectedIndex].value;\n                        if (typeof romNome !== 'string') {\n                            return [2 /*return*/];\n                        }\n                        // dobrar velocidade se a rom for do jogo BLINKY\n                        if (romNome === 'BLINKY') {\n                            this._dobrarVelocidade = true;\n                        }\n                        else {\n                            this._dobrarVelocidade = false;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, fetch(\"roms/\" + romNome)];\n                    case 2:\n                        resposta = _a.sent();\n                        return [4 /*yield*/, resposta.blob()];\n                    case 3:\n                        arquivo = _a.sent();\n                        this._chip8.resetar();\n                        this.enviarPrograma(arquivo);\n                        this._pauseBtn.disabled = false;\n                        this._playBtn.disabled = true;\n                        this._stepBtn.disabled = true;\n                        this._select.blur();\n                        this._arquivoEnviado = false;\n                        this._jogoCarregado = true;\n                        return [3 /*break*/, 5];\n                    case 4:\n                        e_1 = _a.sent();\n                        console.error(e_1);\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /** Inicia a máquina virtual */\n    UI.prototype.iniciarLoop = function () {\n        var _this = this;\n        // executar 10 insturções por frame\n        var execPorFrame = 10;\n        var atualizar = function () {\n            if (_this._jogoCarregado) {\n                var qtd = execPorFrame;\n                // dobra a velocidade se necessário\n                if (_this._dobrarVelocidade) {\n                    qtd = execPorFrame * 2;\n                }\n                for (var i = 0; i < qtd; ++i) {\n                    _this.renderizarAssembly();\n                    _this._chip8.emularCiclo();\n                }\n                _this._renderizador.desenharTela(_this._chip8.tela);\n            }\n            window.requestAnimationFrame(atualizar);\n        };\n        window.requestAnimationFrame(atualizar);\n        this.eventoCarregarROMSelect();\n    };\n    UI.prototype.eventoResetarBtn = function (e) {\n        this._chip8.resetar();\n        // checa se é necessário reenviar a ROM no input\n        if (this._arquivoEnviado) {\n            if (this._input.files !== null &&\n                this._input.files[0] !== null) {\n                this.enviarPrograma(this._input.files[0]);\n            }\n        }\n        else {\n            this.eventoCarregarROMSelect();\n        }\n        this._pauseBtn.disabled = false;\n        this._playBtn.disabled = true;\n        this._stepBtn.disabled = true;\n    };\n    UI.prototype.eventoPauseBtn = function (e) {\n        this._chip8.pausar();\n        this._pauseBtn.disabled = true;\n        this._playBtn.disabled = false;\n        this._stepBtn.disabled = false;\n    };\n    UI.prototype.eventoPlayBtn = function (e) {\n        this._chip8.play();\n        this._pauseBtn.disabled = false;\n        this._playBtn.disabled = true;\n        this._stepBtn.disabled = true;\n    };\n    UI.prototype.eventoStepBtn = function (e) {\n        this._chip8.step();\n    };\n    Object.defineProperty(UI.prototype, \"jogoCarregando\", {\n        get: function () {\n            return this._jogoCarregado;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UI.prototype, \"arquivoEnviado\", {\n        get: function () {\n            return this._arquivoEnviado;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UI.prototype, \"assembly\", {\n        get: function () {\n            return this._assembly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return UI;\n}());\n/* harmony default export */ __webpack_exports__[\"a\"] = (UI);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)[\"Promise\"]))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _renderizador__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/**\n * @fileoverview Define uma implementação da interface\n * IRenderizador, que renderiza em um HTMLCanvasElement\n * @author Roberto Nazareth Guedes\n */\n\nvar RenderizadorCanvas = /** @class */ (function () {\n    function RenderizadorCanvas(ctx) {\n        this.PIXEL_TAMANHO = 8;\n        this._ctx = ctx;\n        this._largura = this.PIXEL_TAMANHO * 64;\n        this._altura = this.PIXEL_TAMANHO * 32;\n    }\n    RenderizadorCanvas.prototype.mudarCor = function (r, g, b) {\n        this._ctx.fillStyle = "rgb(" + r + ", " + g + ", " + b + ")";\n    };\n    RenderizadorCanvas.prototype.desenharQuadrado = function (x, y, l, a) {\n        this._ctx.fillRect(x, y, l, a);\n    };\n    RenderizadorCanvas.prototype.desenharTela = function (tela) {\n        Object(_renderizador__WEBPACK_IMPORTED_MODULE_0__[/* renderizar */ "a"])(this, tela);\n    };\n    RenderizadorCanvas.prototype.limparTela = function () {\n        this._ctx.clearRect(0, 0, this._largura, this._altura);\n    };\n    RenderizadorCanvas.prototype.encerrarFrame = function () {\n    };\n    return RenderizadorCanvas;\n}());\n/* harmony default export */ __webpack_exports__["a"] = (RenderizadorCanvas);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyaXphZG9yQ2FudmFzLnRzPzQ5NmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHdFQUFVO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNjLDJFQUFrQixFQUFDIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGVmaW5lIHVtYSBpbXBsZW1lbnRhw6fDo28gZGEgaW50ZXJmYWNlXG4gKiBJUmVuZGVyaXphZG9yLCBxdWUgcmVuZGVyaXphIGVtIHVtIEhUTUxDYW52YXNFbGVtZW50XG4gKiBAYXV0aG9yIFJvYmVydG8gTmF6YXJldGggR3VlZGVzXG4gKi9cbmltcG9ydCB7IHJlbmRlcml6YXIgfSBmcm9tICcuL3JlbmRlcml6YWRvcic7XG52YXIgUmVuZGVyaXphZG9yQ2FudmFzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbmRlcml6YWRvckNhbnZhcyhjdHgpIHtcbiAgICAgICAgdGhpcy5QSVhFTF9UQU1BTkhPID0gODtcbiAgICAgICAgdGhpcy5fY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLl9sYXJndXJhID0gdGhpcy5QSVhFTF9UQU1BTkhPICogNjQ7XG4gICAgICAgIHRoaXMuX2FsdHVyYSA9IHRoaXMuUElYRUxfVEFNQU5ITyAqIDMyO1xuICAgIH1cbiAgICBSZW5kZXJpemFkb3JDYW52YXMucHJvdG90eXBlLm11ZGFyQ29yID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IFwicmdiKFwiICsgciArIFwiLCBcIiArIGcgKyBcIiwgXCIgKyBiICsgXCIpXCI7XG4gICAgfTtcbiAgICBSZW5kZXJpemFkb3JDYW52YXMucHJvdG90eXBlLmRlc2VuaGFyUXVhZHJhZG8gPSBmdW5jdGlvbiAoeCwgeSwgbCwgYSkge1xuICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoeCwgeSwgbCwgYSk7XG4gICAgfTtcbiAgICBSZW5kZXJpemFkb3JDYW52YXMucHJvdG90eXBlLmRlc2VuaGFyVGVsYSA9IGZ1bmN0aW9uICh0ZWxhKSB7XG4gICAgICAgIHJlbmRlcml6YXIodGhpcywgdGVsYSk7XG4gICAgfTtcbiAgICBSZW5kZXJpemFkb3JDYW52YXMucHJvdG90eXBlLmxpbXBhclRlbGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fbGFyZ3VyYSwgdGhpcy5fYWx0dXJhKTtcbiAgICB9O1xuICAgIFJlbmRlcml6YWRvckNhbnZhcy5wcm90b3R5cGUuZW5jZXJyYXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBSZW5kZXJpemFkb3JDYW52YXM7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgUmVuZGVyaXphZG9yQ2FudmFzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return decodificarPrograma; });\n/* unused harmony export decodificarOpcode */\n/* harmony import */ var _chip8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n\nfunction hexParaString(hex) {\n    var numero = hex.toString(16);\n    return "0x" + numero.toUpperCase();\n}\nfunction decodificarPrograma(programa) {\n    var resultado = {};\n    if (programa.length > _chip8__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].MEMORIA_TAMANHO) {\n        throw new Error(\'O arquivo ultrapassa o tamanho máximo\');\n    }\n    for (var i = 0; i < programa.length; i++) {\n        if (i + 1 > programa.length) {\n            continue;\n        }\n        var byte1 = programa[i];\n        var byte2 = programa[i + 1];\n        if (byte1 === undefined || byte2 === undefined) {\n            continue;\n        }\n        var opcode = (byte1 << 8) | byte2;\n        resultado[i] = decodificarOpcode(opcode);\n    }\n    return resultado;\n}\nfunction decodificarOpcode(opcode) {\n    var op_str = hexParaString(opcode);\n    var nnn = hexParaString(opcode & 0x0FFF);\n    var kk = hexParaString(opcode & 0x00FF);\n    var n = hexParaString(opcode & 0x000F);\n    var x = ((opcode & 0x0F00) >> 8)\n        .toString(16)\n        .toUpperCase();\n    var y = ((opcode & 0x00F0) >> 4)\n        .toString(16)\n        .toUpperCase();\n    switch (opcode & 0xF000) {\n        // identificar operações que começam com 0\n        case 0x0000:\n            switch (opcode & 0x00FF) {\n                // 00E0\n                case 0x00E0:\n                    return \'CLS\';\n                // 00EE\n                case 0x00EE:\n                    return \'RETURN\';\n                default: return op_str;\n            }\n        // 1nnn\n        case 0x1000:\n            return "JUMP " + nnn;\n        // 2nnn\n        case 0x2000:\n            return "CALL " + nnn;\n        // 3xkk\n        case 0x3000:\n            return "SE v" + x + ", " + kk;\n        // 4xkk\n        case 0x4000:\n            return "SNE v" + x + ", " + kk;\n        // 5xy0\n        case 0x5000:\n            return "SE v" + x + ", v" + y;\n        // 6xkk\n        case 0x6000:\n            return "LD v" + x + ", " + kk;\n        // 7xkk    \n        case 0x7000:\n            return "ADD v" + x + ", " + kk;\n        // identificar operações que começam com 8 \n        case 0x8000:\n            switch (opcode & 0x000F) {\n                // 8xy0\n                case 0x0000:\n                    return "LD v" + x + ", v" + y;\n                // 8xy1\n                case 0x0001:\n                    return "OR v" + x + ", v" + y;\n                // 8xy2\n                case 0x0002:\n                    return "AND v" + x + ", v" + y;\n                // 8xy3\n                case 0x0003:\n                    return "XOR v" + x + ", v" + y;\n                // 8xy4\n                case 0x0004:\n                    return "ADD v" + x + ", v" + y;\n                // 8xy5\n                case 0x0005:\n                    return "SUB v" + x + ", v" + y;\n                // 8xy6\n                case 0x0006:\n                    return "SHR v" + x;\n                // 8xy7\n                case 0x0007:\n                    return "SUBN v" + x + ", v" + y;\n                // 8xyE\n                case 0x000E:\n                    return "SHL v" + x;\n                default: return op_str;\n            }\n        // 9xy0\n        case 0x9000:\n            return "SNE v" + x + ", v" + y;\n        // Annn\n        case 0xA000:\n            return "LD I, " + nnn;\n        // Bnnn\n        case 0xB000:\n            return "JP v0, " + nnn;\n        // Cxkk\n        case 0xC000:\n            return "RND v" + x + ", " + kk;\n        // Dxyn\n        case 0xD000:\n            return "DRW v" + x + ", v" + y + ", " + n;\n        // identificar operações que começam com E\n        case 0xE000:\n            switch (opcode & 0x00FF) {\n                // Ex9E\n                case 0x009E:\n                    return "SKP v" + x;\n                // ExA1\n                case 0x00A1:\n                    return "SKNP v" + x;\n                default: return op_str;\n            }\n        // identificar operações que começam com F\n        case 0xF000:\n            switch (opcode & 0x00FF) {\n                // Fx07\n                case 0x0007:\n                    return "LD v" + x + ", DT";\n                // Fx0A\n                case 0x000A:\n                    return "LD v" + x + ", K";\n                // Fx15\n                case 0x0015:\n                    return "LD DT, v" + x;\n                // Fx18\n                case 0x0018:\n                    return "LD ST, v" + x;\n                // Fx1E    \n                case 0x001E:\n                    return "ADD I, v" + x;\n                // Fx29    \n                case 0x0029:\n                    return "LD F, v" + x;\n                // Fx33\n                case 0x0033:\n                    return "LD B, v" + x;\n                // Fx55\n                case 0x0055:\n                    return "LD [I], v" + x;\n                // Fx65\n                case 0x0065:\n                    return "LD v" + x + ", [I]";\n                default: return op_str;\n            }\n        // opcode não encontrado\n        default: return op_str;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);\n/**\n * @author Roberto Nazareth Guedes\n */\n\nfunction main() {\n    try {\n        var ui = new _ui__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]();\n        ui.iniciarLoop();\n    }\n    catch (e) {\n        window.alert(e);\n        console.error(e);\n    }\n}\nmain();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cz9hNGNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDc0I7QUFDdEI7QUFDQTtBQUNBLHFCQUFxQixtREFBRTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3IgUm9iZXJ0byBOYXphcmV0aCBHdWVkZXNcbiAqL1xuaW1wb3J0IFVJIGZyb20gJy4vdWknO1xuZnVuY3Rpb24gbWFpbigpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgdWkgPSBuZXcgVUkoKTtcbiAgICAgICAgdWkuaW5pY2lhckxvb3AoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgd2luZG93LmFsZXJ0KGUpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbn1cbm1haW4oKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function("return this")() || (1, eval)("this");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(Promise) {/* unused harmony export Headers */\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export DOMException */\n/* unused harmony export fetch */\nvar support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      resolve(new Response(body, options))\n    }\n\n    xhr.onerror = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.ontimeout = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.onabort = function() {\n      reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    xhr.open(request.method, request.url, true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr && support.blob) {\n      xhr.responseType = 'blob'\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)[\"Promise\"]))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")}]);