!function(n){var C={};function B(g){if(C[g])return C[g].exports;var I=C[g]={i:g,l:!1,exports:{}};return n[g].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=n,B.c=C,B.d=function(g,I,n){B.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:n})},B.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},B.t=function(I,g){if(1&g&&(I=B(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var n=Object.create(null);if(B.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var C in I)B.d(n,C,function(g){return I[g]}.bind(null,C));return n},B.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return B.d(I,"a",I),I},B.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},B.p="/dist/",B(B.s=5)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\n * @fileoverview Máquina vírtual do CHIP-8\n * @author Roberto Nazareth Guedes\n */\nvar Chip8 = /** @class */ (function () {\n    function Chip8() {\n        this._opcode = 0;\n        this._sp = 0;\n        this._pc = 0x200;\n        this._i = 0;\n        this._delayTempo = 0;\n        this._somTempo = 0;\n        this._esperandoInput = false;\n        this._esperandoRegs = 0;\n        this._desenharFlag = false;\n        this._tela = new Array(32);\n        this._memoria = new Uint8Array(0x1000);\n        this._stack = new Uint16Array(16);\n        this._v = new Uint8Array(16);\n        this._teclado = new Uint8Array(16);\n        this._ultimaTecla = 0;\n        this._pausado = false;\n        this._step = false;\n        for (var i = 0; i < 32; ++i) {\n            this._tela[i] = new Array(64);\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        for (var i = 0; i < Chip8.MEMORIA_TAMANHO; ++i) {\n            this._memoria[i] = 0;\n        }\n        for (var i = 0; i < this._stack.length; ++i) {\n            this._stack[i] = 0;\n        }\n        for (var i = 0; i < this._v.length; ++i) {\n            this._v[i] = 0;\n        }\n        for (var i = 0; i < this._teclado.length; ++i) {\n            this._teclado[i] = 0;\n        }\n        this.carregarFonte();\n    }\n    /** Reseta o emulador ao seu estado inicial */\n    Chip8.prototype.resetar = function () {\n        this._opcode = 0;\n        this._sp = 0;\n        this._pc = 0x200;\n        this._i = 0;\n        this._delayTempo = 0;\n        this._somTempo = 0;\n        this._esperandoInput = false;\n        this._esperandoRegs = 0;\n        this._desenharFlag = false;\n        this._ultimaTecla = 0;\n        this._pausado = false;\n        this._step = false;\n        for (var i = 0; i < 32; ++i) {\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        for (var i = 0; i < Chip8.MEMORIA_TAMANHO; ++i) {\n            this._memoria[i] = 0;\n        }\n        for (var i = 0; i < 16; ++i) {\n            this._stack[i] = 0;\n        }\n        for (var i = 0; i < 16; ++i) {\n            this._v[i] = 0;\n        }\n        for (var i = 0; i < 16; ++i) {\n            this._teclado[i] = 0;\n        }\n        this.carregarFonte();\n    };\n    /** Pausa o emulador */\n    Chip8.prototype.pausar = function () {\n        this._pausado = true;\n    };\n    /** Dá play no emulador */\n    Chip8.prototype.play = function () {\n        this._pausado = false;\n        this._step = false;\n    };\n    Chip8.prototype.step = function () {\n        if (this._pausado) {\n            this._step = true;\n        }\n    };\n    /**\n     * Carrega um programa na memória\n     * @param buffer Programa a ser carregado na memória\n     */\n    Chip8.prototype.carregarPrograma = function (buffer) {\n        var _this = this;\n        buffer.forEach(function (byte, i) {\n            var pos = i + 0x200;\n            if (pos < Chip8.MEMORIA_TAMANHO) {\n                _this._memoria[pos] = byte;\n            }\n        });\n    };\n    /** Emula um ciclo da CPU */\n    Chip8.prototype.emularCiclo = function () {\n        var _this = this;\n        this.buscarOpcode();\n        if (this._pausado) {\n            if (this._step) {\n                this._step = false;\n            }\n            else {\n                return;\n            }\n        }\n        if (this._esperandoInput) {\n            this._teclado.forEach(function (tecla) {\n                if (tecla !== 0) {\n                    // parar de esperar input se o\n                    // usuário pressionar uma tecla\n                    _this._esperandoInput = false;\n                    _this._v[_this._esperandoRegs] = _this._ultimaTecla;\n                    _this._pc += 2;\n                }\n            });\n            return;\n        }\n        this.executarOpcode();\n        if (this._delayTempo > 0) {\n            --this._delayTempo;\n        }\n        if (this._somTempo > 0) {\n            if (this._somTempo === 1) {\n                // BEEP\n            }\n            --this._somTempo;\n        }\n    };\n    /** Carrega a fonte na memória */\n    Chip8.prototype.carregarFonte = function () {\n        var fonte = [\n            0xF0, 0x90, 0x90, 0x90, 0xF0,\n            0x20, 0x60, 0x20, 0x20, 0x70,\n            0xF0, 0x10, 0xF0, 0x80, 0xF0,\n            0xF0, 0x10, 0xF0, 0x10, 0xF0,\n            0x90, 0x90, 0xF0, 0x10, 0x10,\n            0xF0, 0x80, 0xF0, 0x10, 0xF0,\n            0xF0, 0x80, 0xF0, 0x90, 0xF0,\n            0xF0, 0x10, 0x20, 0x40, 0x40,\n            0xF0, 0x90, 0xF0, 0x90, 0xF0,\n            0xF0, 0x90, 0xF0, 0x10, 0xF0,\n            0xF0, 0x90, 0xF0, 0x90, 0x90,\n            0xE0, 0x90, 0xE0, 0x90, 0xE0,\n            0xF0, 0x80, 0x80, 0x80, 0xF0,\n            0xE0, 0x90, 0x90, 0x90, 0xE0,\n            0xF0, 0x80, 0xF0, 0x80, 0xF0,\n            0xF0, 0x80, 0xF0, 0x80, 0x80,\n        ];\n        for (var i = 0; i < 80; ++i) {\n            this._memoria[i] = fonte[i];\n        }\n    };\n    /**\n     * Busca o opcode de acordo com o endereço atual do contador de programa\n     * e atribui este valor para a propriedade "opcode" da cpu.\n     */\n    Chip8.prototype.buscarOpcode = function () {\n        // opcodes tem 2 bytes (16 bits), então, precisamos juntar dois bytes.\n        // Por exemplo: se o valor do primeiro byte for A2, e o do segundo for F0, \n        // então o opcode será A2F0.\n        // "memoria[pc] << 8" cria 4 zeros no numero (em binario), e depois a operação\n        // bitwise OR junta os 2 numeros\n        var primeiro = this._memoria[this._pc];\n        var segundo = this._memoria[this._pc + 1];\n        this._opcode = (primeiro << 8) | segundo;\n    };\n    /** Identifica e executa o opcode */\n    Chip8.prototype.executarOpcode = function () {\n        switch (this._opcode & 0xF000) {\n            case 0x0000:\n                this.executarOp_0xxx();\n                break;\n            case 0x1000:\n                this.op_1nnn_jp();\n                break;\n            case 0x2000:\n                this.op_2nnn_call();\n                break;\n            case 0x3000:\n                this.op_3xkk_se();\n                break;\n            case 0x4000:\n                this.op_4xkk_sne();\n                break;\n            case 0x5000:\n                this.op_5xy0_se();\n                break;\n            case 0x6000:\n                this.op_6xkk_ld();\n                break;\n            case 0x7000:\n                this.op_7xkk_add();\n                break;\n            case 0x8000:\n                this.executarOp_8xxx();\n                break;\n            case 0x9000:\n                this.op_9xy0_sne();\n                break;\n            case 0xA000:\n                this.op_annn_ld();\n                break;\n            case 0xB000:\n                this.op_bnnn_jmp();\n                break;\n            case 0xC000:\n                this.op_cxkk_rnd();\n                break;\n            case 0xD000:\n                this.op_dxyn_draw();\n                break;\n            case 0xE000:\n                this.executarOp_exxx();\n                break;\n            case 0xF000:\n                this.executarOp_fxxx();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com 0 */\n    Chip8.prototype.executarOp_0xxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x00EE:\n                this.op_00ee_ret();\n                break;\n            case 0x00E0:\n                this.op_00e0_clr();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com 8 */\n    Chip8.prototype.executarOp_8xxx = function () {\n        switch (this._opcode & 0x000F) {\n            case 0x0000:\n                this.op_8xy0_ld();\n                break;\n            case 0x0001:\n                this.op_8xy1_or();\n                break;\n            case 0x0002:\n                this.op_8xy2_and();\n                break;\n            case 0x0003:\n                this.op_8xy3_xor();\n                break;\n            case 0x0004:\n                this.op_8xy4_add();\n                break;\n            case 0x0005:\n                this.op_8xy5_sub();\n                break;\n            case 0x0006:\n                this.op_8x06_shr();\n                break;\n            case 0x0007:\n                this.op_8xy7_subn();\n                break;\n            case 0x000E:\n                this.op_8x0e_shl();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com E */\n    Chip8.prototype.executarOp_exxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x009E:\n                this.op_ex9e_skp();\n                break;\n            case 0x00A1:\n                this.op_exa1_sknp();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /** Identifica e executa opcodes que começam com F */\n    Chip8.prototype.executarOp_fxxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x0007:\n                this.op_fx07_ld();\n                break;\n            case 0x000A:\n                this.op_fx0a_ld();\n                break;\n            case 0x0015:\n                this.op_fx15_ld();\n                break;\n            case 0x0018:\n                this.op_fx18_ld();\n                break;\n            case 0x001E:\n                this.op_fx1e_add();\n                break;\n            case 0x0029:\n                this.op_fx29_ld();\n                break;\n            case 0x0033:\n                this.op_fx33_ld();\n                break;\n            case 0x0055:\n                this.op_fx55_ld();\n                break;\n            case 0x0065:\n                this.op_fx65_ld();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this.opcodeHex);\n                this._pc += 2;\n                break;\n        }\n    };\n    /**\n     * CLR\n     * Limpa a tela\n     */\n    Chip8.prototype.op_00e0_clr = function () {\n        for (var i = 0; i < 32; ++i) {\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        this._desenharFlag = true;\n        this._pc += 2;\n    };\n    /**\n     * Opcode 00EE, returna de uma subrotina\n     */\n    Chip8.prototype.op_00ee_ret = function () {\n        this._pc = this._stack[this._sp - 1];\n        this._sp -= 1;\n        this._pc += 2;\n    };\n    /**\n     * JP endereco\n     * Opcode 1nnn: pula o programa para um endereço, onde nnn é o endereço\n     */\n    Chip8.prototype.op_1nnn_jp = function () {\n        this._pc = this.nnn;\n    };\n    /**\n     * Opcode 2nnn: pula o programa para uma subrotina, onde nnn é o endereço da subrotina.\n     */\n    Chip8.prototype.op_2nnn_call = function () {\n        // guarda o endereço atual do programa na stack\n        this._stack[this._sp] = this._pc;\n        this._sp += 1;\n        this._pc = this.nnn;\n    };\n    /**\n     * Opcode 3xkk: pula a proxima instrução se kk for igual a Vx\n     */\n    Chip8.prototype.op_3xkk_se = function () {\n        if (this._v[this.x] === this.kk) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * Opcode 4xkk: pula a proxima instrução se kk for diferente de Vx\n     */\n    Chip8.prototype.op_4xkk_sne = function () {\n        if (this._v[this.x] !== this.kk) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * Opcode 5xy0: pula a proxima instrução se Vx for igual a Vy\n     */\n    Chip8.prototype.op_5xy0_se = function () {\n        if (this._v[this.x] === this._v[this.y]) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD Vx, byte\n     * Opcode 6xkk: guarda o valor kk em Vx\n     */\n    Chip8.prototype.op_6xkk_ld = function () {\n        this._v[this.x] = this.kk;\n        this._pc += 2;\n    };\n    /**\n     * ADD Vx, byte\n     * Opcode 7xkk: adiciona o valor kk ao registrador Vx\n     */\n    Chip8.prototype.op_7xkk_add = function () {\n        this._v[this.x] += this.kk;\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, Vy\n     * opcode 8xy0: salva o valor de Vy no registrador Vx\n     */\n    Chip8.prototype.op_8xy0_ld = function () {\n        this._v[this.x] = this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * OR Vx, Vy\n     * opcode 8xy1: performa uma uma operação bitwise OR\n     * nos valores de Vx e Vy, e salva o resultado no\n     * registrador Vx\n     */\n    Chip8.prototype.op_8xy1_or = function () {\n        this._v[this.x] |= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * AND Vx, Vy\n     * opcode 8xy2: performa uma uma operação bitwise AND\n     * nos valores de Vx e Vy, e salva o resultado no\n     * registrador Vx\n     */\n    Chip8.prototype.op_8xy2_and = function () {\n        this._v[this.x] &= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n    * XOR Vx, Vy\n    * opcode 8xy3: performa uma uma operação bitwise XOR (OR exclusivo)\n    * nos valores de Vx e Vy, e salva o resultado no\n    * registrador Vx\n    */\n    Chip8.prototype.op_8xy3_xor = function () {\n        this._v[this.x] ^= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * ADD Vx, Vy\n     * opcode 8xy4: adiciona o valor de Vy a Vx e ativa a carry flag\n     * do registrador VF caso o resultado seja maior do que 255\n     */\n    Chip8.prototype.op_8xy4_add = function () {\n        this._v[this.x] += this._v[this.y];\n        this._v[0xF] = +(this._v[this.x] > 255);\n        this._pc += 2;\n    };\n    /**\n     * SUB Vx, Vy\n     * opcode 8xy5: subtrai Vx por Vy e guarda o resultado em Vx.\n     * Caso Vx seja maior que Vy, VF é igual a 1, e caso o contrario\n     * é igual a 0\n     */\n    Chip8.prototype.op_8xy5_sub = function () {\n        this._v[0xF] = +(this._v[this.x] > this._v[this.y]);\n        this._v[this.x] -= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * SHR Vx\n     * opcode 8x06: desloca o número uma casa (em binário) para a direita (right shift).\n     * O bit menos significativo do valor original de Vx é salvo no\n     * registrador VF\n     */\n    Chip8.prototype.op_8x06_shr = function () {\n        var vx = this._v[this.x];\n        this._v[0xF] = 0x1 & vx;\n        this._v[this.x] = vx >> 1;\n        this._pc += 2;\n    };\n    /**\n     * SUBN Vx, Vy\n     * opcode 8xy7: subtrai Vy por Vx e guarda o resultado em Vx.\n     * Caso Vx seja maior que Vy, VF é igual a 1, e caso o contrario\n     * é igual a 0\n     */\n    Chip8.prototype.op_8xy7_subn = function () {\n        var vx = this._v[this.x];\n        var vy = this._v[this.y];\n        this._v[0xF] = vy > vx ? 1 : 0;\n        this._v[this.x] = vy - vx;\n        this._pc += 2;\n    };\n    /**\n     * SHL Vx\n     * opcode 8x0E: desloca o número uma casa (em binário) para a esquerda (left shift).\n     * O bit mais significativo do valor original de Vx é salvo no\n     * registrador VF\n     */\n    Chip8.prototype.op_8x0e_shl = function () {\n        var vx = this._v[this.x];\n        this._v[0xF] = vx >> 7;\n        this._v[this.x] = vx << 1;\n        this._pc += 2;\n    };\n    /**\n     * SNE Vx, Vy\n     * Pula a proxima instrução se Vx for diferente de Vy\n     */\n    Chip8.prototype.op_9xy0_sne = function () {\n        if (this._v[this.x] !== this._v[this.y]) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD I, addr\n     * Atribui o valor de addr para I\n     */\n    Chip8.prototype.op_annn_ld = function () {\n        this._i = this.nnn;\n        this._pc += 2;\n    };\n    /**\n     * JMP V0, endereco\n     * Pula para o endereço nnn + V0\n     */\n    Chip8.prototype.op_bnnn_jmp = function () {\n        this._pc = this._v[this.x] + this.nnn;\n    };\n    /**\n     * RND Vx, byte\n     * Vx = byte aleatório & kk\n     */\n    Chip8.prototype.op_cxkk_rnd = function () {\n        this._v[this.x] = (Math.random() * 0x100) & this.kk;\n        this._pc += 2;\n    };\n    Chip8.prototype.setPixel = function (pos_x, pos_y, fim_sprite) {\n        var colisao = 0;\n        var sprite = this._memoria.slice(this._i, fim_sprite + 1);\n        for (var i = 0; i < sprite.length - 1; ++i) {\n            for (var j = 0; j < 8; ++j) {\n                var x = (pos_x + j) % 64;\n                var y = (pos_y + i) % 32;\n                if ((sprite[i] & (0x80 >> j)) !== 0) {\n                    if (this._tela[y][x] === 1) {\n                        colisao = 1;\n                    }\n                    this._tela[y][x] ^= 1;\n                }\n            }\n        }\n        this._desenharFlag = true;\n        return colisao;\n    };\n    /**\n     * Desenha um sprite na coordenada (Vx, Vy), com 8 pixels de largura e N de altura\n     */\n    Chip8.prototype.op_dxyn_draw = function () {\n        var n = this._opcode & 0x000F;\n        var fim_sprite = this._i + n;\n        this._v[0xF] = this.setPixel(this._v[this.x], this._v[this.y], fim_sprite);\n        this._pc += 2;\n    };\n    /**\n     * SKP Vx\n     * pula a próxima instrução se a tecla com o valor de Vx estiver sendo pressionada\n     */\n    Chip8.prototype.op_ex9e_skp = function () {\n        var tecla = this._v[this.x];\n        if (this._teclado[tecla] !== 0) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * SKNP Vx\n     * pula a próxima instrução se a tecla com o valor de Vx não estiver sendo pressionada\n     */\n    Chip8.prototype.op_exa1_sknp = function () {\n        var tecla = this._v[this.x];\n        if (this._teclado[tecla] === 0) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD Vx, K\n     * Espera o usuário pressionar uma tecla, e atribui o valor a Vx\n     */\n    Chip8.prototype.op_fx0a_ld = function () {\n        this._esperandoInput = true;\n        this._esperandoRegs = this.x;\n        //this._pc += 2;\n    };\n    /**\n     * LD Vx, DELAY_TIMER\n     * Atribui o valor do temporizador de delay ao Vx\n     */\n    Chip8.prototype.op_fx07_ld = function () {\n        this._v[this.x] = this._delayTempo;\n        this._pc += 2;\n    };\n    /**\n     * LD DELAY_TIMER, Vx\n     * Atribui o valor de Vx ao temporizador de delay\n     */\n    Chip8.prototype.op_fx15_ld = function () {\n        this._delayTempo = this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * LD SOUND_TIMER, Vx\n     * Atribui o valor de Vx ao temporizador de som\n     */\n    Chip8.prototype.op_fx18_ld = function () {\n        this._somTempo = this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * ADD I, Vx\n     * I = I + Vx\n     */\n    Chip8.prototype.op_fx1e_add = function () {\n        this._i += this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * LD F, Vx\n     * Atribui ao I o endereço do sprite correspondente à Vx\n     */\n    Chip8.prototype.op_fx29_ld = function () {\n        this._i = this._v[this.x] * Chip8.FONTE_LARGURA;\n        this._pc += 2;\n    };\n    /**\n     * LD B, Vx\n     * opcode Fx33: Guarda a representação em codificação binária decimal (BCD)\n     * do valor do registrador Vx. O digito na casa das centenas será salvo no\n     * endereço "i" (o registrador de index), a casa das dezenas será salva no\n     * endereço "i + 1", e o digito da casa das unidades erá salvo em "i + 2"\n     */\n    Chip8.prototype.op_fx33_ld = function () {\n        var valor = this._v[this.x];\n        this._memoria[this._i] = valor / 100;\n        this._memoria[this._i + 1] = (valor / 10) % 10;\n        this._memoria[this._i + 2] = (valor % 100) % 10;\n        this._pc += 2;\n    };\n    /**\n     * LD [I], Vx\n     * Guarda os valores de V0 à Vx na memória a partir do endereço I\n     */\n    Chip8.prototype.op_fx55_ld = function () {\n        for (var i = 0; i <= this.x; i++) {\n            this._memoria[i + this._i] = this._v[i];\n        }\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, [I]\n     * Preenche os registradores de V0 à Vx com valores na memória a partir do endereço I\n     */\n    Chip8.prototype.op_fx65_ld = function () {\n        for (var i = 0; i <= this.x; i++) {\n            this._v[i] = this._memoria[i + this._i];\n        }\n        this._pc += 2;\n    };\n    /** Registra que uma tecla foi apertada */\n    Chip8.prototype.teclaBaixo = function (tecla) {\n        this._teclado[tecla] = 1;\n        this._ultimaTecla = tecla;\n    };\n    /** Registra que uma tecla foi solta */\n    Chip8.prototype.teclaCima = function (tecla) {\n        this._teclado[tecla] = 0;\n    };\n    Object.defineProperty(Chip8.prototype, "v", {\n        /** Os registradores da CPU */\n        get: function () {\n            return this._v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "pc", {\n        /** Contador de programa */\n        get: function () {\n            return this._pc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "opcode", {\n        get: function () {\n            return this._opcode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "opcodeHex", {\n        get: function () {\n            var hex = this._opcode.toString(16);\n            return \'0x\' + hex.toUpperCase();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "nnn", {\n        /** As 3 últimas casas (em hexadecimal) do opcode */\n        get: function () {\n            return this._opcode & 0x0FFF;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "kk", {\n        /** As 2 últimas casas (em hexadecimal) do opcode */\n        get: function () {\n            return this._opcode & 0x00FF;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "x", {\n        /** O número na segunda casa (da esquerda pra direita em hexadecimal) do opcode */\n        get: function () {\n            return (this._opcode & 0x0F00) >> 8;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "y", {\n        /** O número na terceira casa (da esquerda pra direita em hexadecimal) do opcode */\n        get: function () {\n            return (this._opcode & 0x00F0) >> 4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "desenharFlag", {\n        get: function () {\n            return this._desenharFlag;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "tela", {\n        get: function () {\n            return this._tela;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "memoria", {\n        get: function () {\n            return this._memoria;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "teclado", {\n        get: function () {\n            return this._teclado;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Chip8.MEMORIA_TAMANHO = 0x1000;\n    Chip8.FONTE_LARGURA = 5;\n    return Chip8;\n}());\n/* harmony default export */ __webpack_exports__["a"] = (Chip8);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return traduzirInput; });\nvar teclas = {\n    49: 0x1,\n    50: 0x2,\n    51: 0x3,\n    52: 0xC,\n    65: 0x7,\n    67: 0xB,\n    68: 0x9,\n    69: 0x6,\n    70: 0xE,\n    81: 0x4,\n    82: 0xD,\n    83: 0x8,\n    86: 0xF,\n    87: 0x5,\n    88: 0x0,\n    90: 0xA,\n};\n/**\n * Traduz o valor de uma tecla do PC para a tecla\n * correspondente no CHIP-8\n * @param tecla_pc O valor da tecla do PC\n * @returns O valor convertido\n */\nfunction traduzirInput(tecla_pc) {\n    var tecla_chip8 = teclas[tecla_pc];\n    // se o valor não estiver no hashmap\n    if (typeof tecla_chip8 === 'undefined' || tecla_chip8 === 0) {\n        throw new Error('tecla não encontrada');\n    }\n    return tecla_chip8;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5wdXQudHM/ZmYyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ZWNsYXMgPSB7XG4gICAgNDk6IDB4MSxcbiAgICA1MDogMHgyLFxuICAgIDUxOiAweDMsXG4gICAgNTI6IDB4QyxcbiAgICA2NTogMHg3LFxuICAgIDY3OiAweEIsXG4gICAgNjg6IDB4OSxcbiAgICA2OTogMHg2LFxuICAgIDcwOiAweEUsXG4gICAgODE6IDB4NCxcbiAgICA4MjogMHhELFxuICAgIDgzOiAweDgsXG4gICAgODY6IDB4RixcbiAgICA4NzogMHg1LFxuICAgIDg4OiAweDAsXG4gICAgOTA6IDB4QSxcbn07XG4vKipcbiAqIFRyYWR1eiBvIHZhbG9yIGRlIHVtYSB0ZWNsYSBkbyBQQyBwYXJhIGEgdGVjbGFcbiAqIGNvcnJlc3BvbmRlbnRlIG5vIENISVAtOFxuICogQHBhcmFtIHRlY2xhX3BjIE8gdmFsb3IgZGEgdGVjbGEgZG8gUENcbiAqIEByZXR1cm5zIE8gdmFsb3IgY29udmVydGlkb1xuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhZHV6aXJJbnB1dCh0ZWNsYV9wYykge1xuICAgIHZhciB0ZWNsYV9jaGlwOCA9IHRlY2xhc1t0ZWNsYV9wY107XG4gICAgLy8gc2UgbyB2YWxvciBuw6NvIGVzdGl2ZXIgbm8gaGFzaG1hcFxuICAgIGlmICh0eXBlb2YgdGVjbGFfY2hpcDggPT09ICd1bmRlZmluZWQnIHx8IHRlY2xhX2NoaXA4ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGVjbGEgbsOjbyBlbmNvbnRyYWRhJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZWNsYV9jaGlwODtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\n * @fileoverview Define uma implementação da interface\n * IRenderizador, que renderiza em um HTMLCanvasElement\n * @author Roberto Nazareth Guedes\n */\nvar RenderizadorCanvas = /** @class */ (function () {\n    function RenderizadorCanvas(ctx) {\n        this.PIXEL_TAMANHO = 8;\n        this._ctx = ctx;\n        this._largura = this.PIXEL_TAMANHO * 64;\n        this._altura = this.PIXEL_TAMANHO * 32;\n    }\n    RenderizadorCanvas.prototype.mudarCor = function (cor) {\n        this._ctx.fillStyle = cor;\n    };\n    RenderizadorCanvas.prototype.desenharQuadrado = function (x, y, l, a) {\n        this._ctx.fillRect(x, y, l, a);\n    };\n    RenderizadorCanvas.prototype.limparTela = function () {\n        this._ctx.clearRect(0, 0, this._largura, this._altura);\n    };\n    return RenderizadorCanvas;\n}());\n/* harmony default export */ __webpack_exports__["a"] = (RenderizadorCanvas);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyaXphZG9yQ2FudmFzLnRzPzQ5NmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ2MsMkVBQWtCLEVBQUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmUgdW1hIGltcGxlbWVudGHDp8OjbyBkYSBpbnRlcmZhY2VcbiAqIElSZW5kZXJpemFkb3IsIHF1ZSByZW5kZXJpemEgZW0gdW0gSFRNTENhbnZhc0VsZW1lbnRcbiAqIEBhdXRob3IgUm9iZXJ0byBOYXphcmV0aCBHdWVkZXNcbiAqL1xudmFyIFJlbmRlcml6YWRvckNhbnZhcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJpemFkb3JDYW52YXMoY3R4KSB7XG4gICAgICAgIHRoaXMuUElYRUxfVEFNQU5ITyA9IDg7XG4gICAgICAgIHRoaXMuX2N0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5fbGFyZ3VyYSA9IHRoaXMuUElYRUxfVEFNQU5ITyAqIDY0O1xuICAgICAgICB0aGlzLl9hbHR1cmEgPSB0aGlzLlBJWEVMX1RBTUFOSE8gKiAzMjtcbiAgICB9XG4gICAgUmVuZGVyaXphZG9yQ2FudmFzLnByb3RvdHlwZS5tdWRhckNvciA9IGZ1bmN0aW9uIChjb3IpIHtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IGNvcjtcbiAgICB9O1xuICAgIFJlbmRlcml6YWRvckNhbnZhcy5wcm90b3R5cGUuZGVzZW5oYXJRdWFkcmFkbyA9IGZ1bmN0aW9uICh4LCB5LCBsLCBhKSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsUmVjdCh4LCB5LCBsLCBhKTtcbiAgICB9O1xuICAgIFJlbmRlcml6YWRvckNhbnZhcy5wcm90b3R5cGUubGltcGFyVGVsYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLl9sYXJndXJhLCB0aGlzLl9hbHR1cmEpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlbmRlcml6YWRvckNhbnZhcztcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBSZW5kZXJpemFkb3JDYW52YXM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return renderizar; });\n/**\n * @fileoverview Define uma interface para o renderizador, e também\n * uma função para renderizar os dados da tela da máquina virtual\n * @author Roberto Nazareth Guedes\n */\nfunction renderizar(render, tela) {\n    render.limparTela();\n    for (var y = 0; y < 32; ++y) {\n        for (var x = 0; x < 64; ++x) {\n            var pixel = tela[y][x];\n            if (pixel !== 0) {\n                render.mudarCor('rgb(255, 255, 255)');\n            }\n            else {\n                render.mudarCor('rgb(57, 50, 71)');\n            }\n            render.desenharQuadrado(x * 8, y * 8, 8, 8);\n        }\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyaXphZG9yLnRzPzU4ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1CQUFtQixRQUFRO0FBQzNCLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmUgdW1hIGludGVyZmFjZSBwYXJhIG8gcmVuZGVyaXphZG9yLCBlIHRhbWLDqW1cbiAqIHVtYSBmdW7Dp8OjbyBwYXJhIHJlbmRlcml6YXIgb3MgZGFkb3MgZGEgdGVsYSBkYSBtw6FxdWluYSB2aXJ0dWFsXG4gKiBAYXV0aG9yIFJvYmVydG8gTmF6YXJldGggR3VlZGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJpemFyKHJlbmRlciwgdGVsYSkge1xuICAgIHJlbmRlci5saW1wYXJUZWxhKCk7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCAzMjsgKyt5KSB7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNjQ7ICsreCkge1xuICAgICAgICAgICAgdmFyIHBpeGVsID0gdGVsYVt5XVt4XTtcbiAgICAgICAgICAgIGlmIChwaXhlbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJlbmRlci5tdWRhckNvcigncmdiKDI1NSwgMjU1LCAyNTUpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW5kZXIubXVkYXJDb3IoJ3JnYig1NywgNTAsIDcxKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVuZGVyLmRlc2VuaGFyUXVhZHJhZG8oeCAqIDgsIHkgKiA4LCA4LCA4KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return decodificarPrograma; });\n/* unused harmony export decodificarOpcode */\n/* harmony import */ var _chip8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n\nfunction hexParaString(hex) {\n    var numero = hex.toString(16);\n    return "0x" + numero.toUpperCase();\n}\nfunction decodificarPrograma(programa) {\n    var resultado = {};\n    if (programa.length > _chip8__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].MEMORIA_TAMANHO) {\n        throw new Error(\'O arquivo ultrapassa o tamanho máximo\');\n    }\n    for (var i = 0; i < programa.length; i++) {\n        if (i + 1 > programa.length) {\n            continue;\n        }\n        var byte1 = programa[i];\n        var byte2 = programa[i + 1];\n        if (byte1 === undefined || byte2 === undefined) {\n            continue;\n        }\n        var opcode = (byte1 << 8) | byte2;\n        resultado[i] = decodificarOpcode(opcode);\n    }\n    return resultado;\n}\nfunction decodificarOpcode(opcode) {\n    var op_str = hexParaString(opcode);\n    var nnn = hexParaString(opcode & 0x0FFF);\n    var kk = hexParaString(opcode & 0x00FF);\n    var n = hexParaString(opcode & 0x000F);\n    var x = ((opcode & 0x0F00) >> 8)\n        .toString(16)\n        .toUpperCase();\n    var y = ((opcode & 0x00F0) >> 4)\n        .toString(16)\n        .toUpperCase();\n    switch (opcode & 0xF000) {\n        // identificar operações que começam com 0\n        case 0x0000:\n            switch (opcode & 0x00FF) {\n                // 00E0\n                case 0x00E0:\n                    return \'CLS\';\n                // 00EE\n                case 0x00EE:\n                    return \'RETURN\';\n                default: return op_str;\n            }\n        // 1nnn\n        case 0x1000:\n            return "JUMP " + nnn;\n        // 2nnn\n        case 0x2000:\n            return "CALL " + nnn;\n        // 3xkk\n        case 0x3000:\n            return "SE v" + x + ", " + kk;\n        // 4xkk\n        case 0x4000:\n            return "SNE v" + x + ", " + kk;\n        // 5xy0\n        case 0x5000:\n            return "SE v" + x + ", v" + y;\n        // 6xkk\n        case 0x6000:\n            return "LD v" + x + ", " + kk;\n        // 7xkk    \n        case 0x7000:\n            return "ADD v" + x + ", " + kk;\n        // identificar operações que começam com 8 \n        case 0x8000:\n            switch (opcode & 0x000F) {\n                // 8xy0\n                case 0x0000:\n                    return "LD v" + x + ", v" + y;\n                // 8xy1\n                case 0x0001:\n                    return "OR v" + x + ", v" + y;\n                // 8xy2\n                case 0x0002:\n                    return "AND v" + x + ", v" + y;\n                // 8xy3\n                case 0x0003:\n                    return "XOR v" + x + ", v" + y;\n                // 8xy4\n                case 0x0004:\n                    return "ADD v" + x + ", v" + y;\n                // 8xy5\n                case 0x0005:\n                    return "SUB v" + x + ", v" + y;\n                // 8xy6\n                case 0x0006:\n                    return "SHR v" + x;\n                // 8xy7\n                case 0x0007:\n                    return "SUBN v" + x + ", v" + y;\n                // 8xyE\n                case 0x000E:\n                    return "SHL v" + x;\n                default: return op_str;\n            }\n        // 9xy0\n        case 0x9000:\n            return "SNE v" + x + ", v" + y;\n        // Annn\n        case 0xA000:\n            return "LD I, " + nnn;\n        // Bnnn\n        case 0xB000:\n            return "JP v0, " + nnn;\n        // Cxkk\n        case 0xC000:\n            return "RND v" + x + ", " + kk;\n        // Dxyn\n        case 0xD000:\n            return "DRW v" + x + ", v" + y + ", " + n;\n        // identificar operações que começam com E\n        case 0xE000:\n            switch (opcode & 0x00FF) {\n                // Ex9E\n                case 0x009E:\n                    return "SKP v" + x;\n                // ExA1\n                case 0x00A1:\n                    return "SKNP v" + x;\n                default: return op_str;\n            }\n        // identificar operações que começam com F\n        case 0xF000:\n            switch (opcode & 0x00FF) {\n                // Fx07\n                case 0x0007:\n                    return "LD v" + x + ", DT";\n                // Fx0A\n                case 0x000A:\n                    return "LD v" + x + ", K";\n                // Fx15\n                case 0x0015:\n                    return "LD DT, v" + x;\n                // Fx18\n                case 0x0018:\n                    return "LD ST, v" + x;\n                // Fx1E    \n                case 0x001E:\n                    return "ADD I, v" + x;\n                // Fx29    \n                case 0x0029:\n                    return "LD F, v" + x;\n                // Fx33\n                case 0x0033:\n                    return "LD B, v" + x;\n                // Fx55\n                case 0x0055:\n                    return "LD [I], v" + x;\n                // Fx65\n                case 0x0065:\n                    return "LD v" + x + ", [I]";\n                default: return op_str;\n            }\n        // opcode não encontrado\n        default: return op_str;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGlzYXNzZW1ibGVyLnRzPzAyMDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDBCQUEwQixzREFBSztBQUMvQjtBQUNBO0FBQ0EsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoaXA4IGZyb20gJy4vY2hpcDgnO1xuZnVuY3Rpb24gaGV4UGFyYVN0cmluZyhoZXgpIHtcbiAgICB2YXIgbnVtZXJvID0gaGV4LnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gXCIweFwiICsgbnVtZXJvLnRvVXBwZXJDYXNlKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RpZmljYXJQcm9ncmFtYShwcm9ncmFtYSkge1xuICAgIHZhciByZXN1bHRhZG8gPSB7fTtcbiAgICBpZiAocHJvZ3JhbWEubGVuZ3RoID4gQ2hpcDguTUVNT1JJQV9UQU1BTkhPKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTyBhcnF1aXZvIHVsdHJhcGFzc2EgbyB0YW1hbmhvIG3DoXhpbW8nKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9ncmFtYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSArIDEgPiBwcm9ncmFtYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBieXRlMSA9IHByb2dyYW1hW2ldO1xuICAgICAgICB2YXIgYnl0ZTIgPSBwcm9ncmFtYVtpICsgMV07XG4gICAgICAgIGlmIChieXRlMSA9PT0gdW5kZWZpbmVkIHx8IGJ5dGUyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcGNvZGUgPSAoYnl0ZTEgPDwgOCkgfCBieXRlMjtcbiAgICAgICAgcmVzdWx0YWRvW2ldID0gZGVjb2RpZmljYXJPcGNvZGUob3Bjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdGFkbztcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGlmaWNhck9wY29kZShvcGNvZGUpIHtcbiAgICB2YXIgb3Bfc3RyID0gaGV4UGFyYVN0cmluZyhvcGNvZGUpO1xuICAgIHZhciBubm4gPSBoZXhQYXJhU3RyaW5nKG9wY29kZSAmIDB4MEZGRik7XG4gICAgdmFyIGtrID0gaGV4UGFyYVN0cmluZyhvcGNvZGUgJiAweDAwRkYpO1xuICAgIHZhciBuID0gaGV4UGFyYVN0cmluZyhvcGNvZGUgJiAweDAwMEYpO1xuICAgIHZhciB4ID0gKChvcGNvZGUgJiAweDBGMDApID4+IDgpXG4gICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgLnRvVXBwZXJDYXNlKCk7XG4gICAgdmFyIHkgPSAoKG9wY29kZSAmIDB4MDBGMCkgPj4gNClcbiAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAudG9VcHBlckNhc2UoKTtcbiAgICBzd2l0Y2ggKG9wY29kZSAmIDB4RjAwMCkge1xuICAgICAgICAvLyBpZGVudGlmaWNhciBvcGVyYcOnw7VlcyBxdWUgY29tZcOnYW0gY29tIDBcbiAgICAgICAgY2FzZSAweDAwMDA6XG4gICAgICAgICAgICBzd2l0Y2ggKG9wY29kZSAmIDB4MDBGRikge1xuICAgICAgICAgICAgICAgIC8vIDAwRTBcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDBFMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDTFMnO1xuICAgICAgICAgICAgICAgIC8vIDAwRUVcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDBFRTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdSRVRVUk4nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBvcF9zdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIC8vIDFubm5cbiAgICAgICAgY2FzZSAweDEwMDA6XG4gICAgICAgICAgICByZXR1cm4gXCJKVU1QIFwiICsgbm5uO1xuICAgICAgICAvLyAybm5uXG4gICAgICAgIGNhc2UgMHgyMDAwOlxuICAgICAgICAgICAgcmV0dXJuIFwiQ0FMTCBcIiArIG5ubjtcbiAgICAgICAgLy8gM3hra1xuICAgICAgICBjYXNlIDB4MzAwMDpcbiAgICAgICAgICAgIHJldHVybiBcIlNFIHZcIiArIHggKyBcIiwgXCIgKyBraztcbiAgICAgICAgLy8gNHhra1xuICAgICAgICBjYXNlIDB4NDAwMDpcbiAgICAgICAgICAgIHJldHVybiBcIlNORSB2XCIgKyB4ICsgXCIsIFwiICsga2s7XG4gICAgICAgIC8vIDV4eTBcbiAgICAgICAgY2FzZSAweDUwMDA6XG4gICAgICAgICAgICByZXR1cm4gXCJTRSB2XCIgKyB4ICsgXCIsIHZcIiArIHk7XG4gICAgICAgIC8vIDZ4a2tcbiAgICAgICAgY2FzZSAweDYwMDA6XG4gICAgICAgICAgICByZXR1cm4gXCJMRCB2XCIgKyB4ICsgXCIsIFwiICsga2s7XG4gICAgICAgIC8vIDd4a2sgICAgXG4gICAgICAgIGNhc2UgMHg3MDAwOlxuICAgICAgICAgICAgcmV0dXJuIFwiQUREIHZcIiArIHggKyBcIiwgXCIgKyBraztcbiAgICAgICAgLy8gaWRlbnRpZmljYXIgb3BlcmHDp8O1ZXMgcXVlIGNvbWXDp2FtIGNvbSA4IFxuICAgICAgICBjYXNlIDB4ODAwMDpcbiAgICAgICAgICAgIHN3aXRjaCAob3Bjb2RlICYgMHgwMDBGKSB7XG4gICAgICAgICAgICAgICAgLy8gOHh5MFxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJMRCB2XCIgKyB4ICsgXCIsIHZcIiArIHk7XG4gICAgICAgICAgICAgICAgLy8gOHh5MVxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJPUiB2XCIgKyB4ICsgXCIsIHZcIiArIHk7XG4gICAgICAgICAgICAgICAgLy8gOHh5MlxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJBTkQgdlwiICsgeCArIFwiLCB2XCIgKyB5O1xuICAgICAgICAgICAgICAgIC8vIDh4eTNcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDAwMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiWE9SIHZcIiArIHggKyBcIiwgdlwiICsgeTtcbiAgICAgICAgICAgICAgICAvLyA4eHk0XG4gICAgICAgICAgICAgICAgY2FzZSAweDAwMDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkFERCB2XCIgKyB4ICsgXCIsIHZcIiArIHk7XG4gICAgICAgICAgICAgICAgLy8gOHh5NVxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTVUIgdlwiICsgeCArIFwiLCB2XCIgKyB5O1xuICAgICAgICAgICAgICAgIC8vIDh4eTZcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDAwNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU0hSIHZcIiArIHg7XG4gICAgICAgICAgICAgICAgLy8gOHh5N1xuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDA3OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTVUJOIHZcIiArIHggKyBcIiwgdlwiICsgeTtcbiAgICAgICAgICAgICAgICAvLyA4eHlFXG4gICAgICAgICAgICAgICAgY2FzZSAweDAwMEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNITCB2XCIgKyB4O1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBvcF9zdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIC8vIDl4eTBcbiAgICAgICAgY2FzZSAweDkwMDA6XG4gICAgICAgICAgICByZXR1cm4gXCJTTkUgdlwiICsgeCArIFwiLCB2XCIgKyB5O1xuICAgICAgICAvLyBBbm5uXG4gICAgICAgIGNhc2UgMHhBMDAwOlxuICAgICAgICAgICAgcmV0dXJuIFwiTEQgSSwgXCIgKyBubm47XG4gICAgICAgIC8vIEJubm5cbiAgICAgICAgY2FzZSAweEIwMDA6XG4gICAgICAgICAgICByZXR1cm4gXCJKUCB2MCwgXCIgKyBubm47XG4gICAgICAgIC8vIEN4a2tcbiAgICAgICAgY2FzZSAweEMwMDA6XG4gICAgICAgICAgICByZXR1cm4gXCJSTkQgdlwiICsgeCArIFwiLCBcIiArIGtrO1xuICAgICAgICAvLyBEeHluXG4gICAgICAgIGNhc2UgMHhEMDAwOlxuICAgICAgICAgICAgcmV0dXJuIFwiRFJXIHZcIiArIHggKyBcIiwgdlwiICsgeSArIFwiLCBcIiArIG47XG4gICAgICAgIC8vIGlkZW50aWZpY2FyIG9wZXJhw6fDtWVzIHF1ZSBjb21lw6dhbSBjb20gRVxuICAgICAgICBjYXNlIDB4RTAwMDpcbiAgICAgICAgICAgIHN3aXRjaCAob3Bjb2RlICYgMHgwMEZGKSB7XG4gICAgICAgICAgICAgICAgLy8gRXg5RVxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDlFOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTS1AgdlwiICsgeDtcbiAgICAgICAgICAgICAgICAvLyBFeEExXG4gICAgICAgICAgICAgICAgY2FzZSAweDAwQTE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNLTlAgdlwiICsgeDtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gb3Bfc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAvLyBpZGVudGlmaWNhciBvcGVyYcOnw7VlcyBxdWUgY29tZcOnYW0gY29tIEZcbiAgICAgICAgY2FzZSAweEYwMDA6XG4gICAgICAgICAgICBzd2l0Y2ggKG9wY29kZSAmIDB4MDBGRikge1xuICAgICAgICAgICAgICAgIC8vIEZ4MDdcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDAwNzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTEQgdlwiICsgeCArIFwiLCBEVFwiO1xuICAgICAgICAgICAgICAgIC8vIEZ4MEFcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDAwQTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTEQgdlwiICsgeCArIFwiLCBLXCI7XG4gICAgICAgICAgICAgICAgLy8gRngxNVxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDE1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJMRCBEVCwgdlwiICsgeDtcbiAgICAgICAgICAgICAgICAvLyBGeDE4XG4gICAgICAgICAgICAgICAgY2FzZSAweDAwMTg6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkxEIFNULCB2XCIgKyB4O1xuICAgICAgICAgICAgICAgIC8vIEZ4MUUgICAgXG4gICAgICAgICAgICAgICAgY2FzZSAweDAwMUU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkFERCBJLCB2XCIgKyB4O1xuICAgICAgICAgICAgICAgIC8vIEZ4MjkgICAgXG4gICAgICAgICAgICAgICAgY2FzZSAweDAwMjk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkxEIEYsIHZcIiArIHg7XG4gICAgICAgICAgICAgICAgLy8gRngzM1xuICAgICAgICAgICAgICAgIGNhc2UgMHgwMDMzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJMRCBCLCB2XCIgKyB4O1xuICAgICAgICAgICAgICAgIC8vIEZ4NTVcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDA1NTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTEQgW0ldLCB2XCIgKyB4O1xuICAgICAgICAgICAgICAgIC8vIEZ4NjVcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDA2NTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTEQgdlwiICsgeCArIFwiLCBbSV1cIjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gb3Bfc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAvLyBvcGNvZGUgbsOjbyBlbmNvbnRyYWRvXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBvcF9zdHI7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var _chip8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _renderizadorCanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);\n/* harmony import */ var _renderizador__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);\n/* harmony import */ var _disassembler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);\n/**\n * @author Roberto Nazareth Guedes\n */\n\n\n\n\n\nvar jogoCarregado = false;\nvar assembly = {};\n/**\n * Carrega o arquivo no emulador\n * @param chip8 Instancia da máquina virtual em que o arquivo será carregado\n * @param arquivo O arquivo a ser carregado\n */\nfunction enviarPrograma(chip8, arquivo) {\n    var leitor = new FileReader();\n    leitor.onload = function () {\n        if (this.result === null || typeof this.result === 'string') {\n            throw new Error('Erro ao ler arquivo');\n        }\n        if (jogoCarregado) {\n            chip8.resetar();\n        }\n        var programa = new Uint8Array(this.result);\n        chip8.carregarPrograma(programa);\n        assembly = Object(_disassembler__WEBPACK_IMPORTED_MODULE_4__[/* decodificarPrograma */ \"a\"])(chip8.memoria);\n        jogoCarregado = true;\n    };\n    if (arquivo instanceof Blob)\n        leitor.readAsArrayBuffer(arquivo);\n}\n/**\n * Remove os elementos filhos de um div\n * @param div O div a ter os elementos filhos removidos\n */\nfunction removerFilhos(div) {\n    while (div.firstChild) {\n        div.removeChild(div.firstChild);\n    }\n}\n/** Checa se o número é par */\nfunction par(num) {\n    return num % 2 === 0;\n}\nfunction renderizarAssembly(chip8, div_pai) {\n    var instrucoes = [];\n    var inicio = chip8.pc - 6;\n    for (var i = 0; i < 12; ++i) {\n        var endereco = (i + inicio);\n        var enderHex = endereco.toString(16).toUpperCase();\n        var instrucao = assembly[endereco];\n        // só mostrar a instrução caso tanto o pc quanto \n        // o endereço forem pares ou forem impares\n        if ((par(chip8.pc) && par(endereco)) ||\n            (!par(chip8.pc) && !par(endereco))) {\n            if (typeof instrucao === 'string') {\n                if (endereco === chip8.pc) {\n                    instrucoes.push(\"->  0x\" + enderHex + \": \" + instrucao);\n                }\n                else {\n                    instrucoes.push(\"0x\" + enderHex + \": \" + instrucao);\n                }\n            }\n        }\n    }\n    removerFilhos(div_pai);\n    for (var _i = 0, instrucoes_1 = instrucoes; _i < instrucoes_1.length; _i++) {\n        var instrucao = instrucoes_1[_i];\n        var p = document.createElement('p');\n        p.innerHTML = instrucao;\n        p.classList.add('instrucao');\n        if (instrucao.startsWith('->')) {\n            p.classList.add('atual');\n        }\n        div_pai.appendChild(p);\n    }\n}\nfunction main() {\n    var chip8 = new _chip8__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]();\n    var canvas = document.querySelector('canvas#chip-8');\n    if (canvas === null) {\n        throw new Error('Erro ao buscar canvas');\n    }\n    var ctx = canvas.getContext('2d');\n    if (ctx === null) {\n        throw new Error('Erro ao buscar contexto do canvas');\n    }\n    var renderizador = new _renderizadorCanvas__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](ctx);\n    var input = document.querySelector('input#rom-arquivo');\n    if (input === null) {\n        console.error('Erro: elemento input não encontrado');\n        return;\n    }\n    var divInstrucoes = document.querySelector('div#instrucoes');\n    if (!(divInstrucoes instanceof HTMLDivElement)) {\n        console.error('Erro: div de instruções não encontrado');\n        return;\n    }\n    var resetarBtn = document.querySelector('#chip-8-resetar');\n    var pauseBtn = document.querySelector('#chip-8-pause');\n    var playBtn = document.querySelector('#chip-8-play');\n    var stepBtn = document.querySelector('#chip-8-step');\n    if (pauseBtn === null || playBtn === null ||\n        stepBtn === null || resetarBtn === null) {\n        throw new Error('Botões não encontrados');\n    }\n    // reseta a maquina virtual quando o botão\n    // for pressionado\n    resetarBtn.onclick = function (e) {\n        chip8.resetar();\n        // enviar programa haja um arquivo no input,\n        // recarregar ele\n        if (input.files !== null && input.files[0] !== null) {\n            enviarPrograma(chip8, input.files[0]);\n        }\n        pauseBtn.disabled = false;\n        playBtn.disabled = true;\n        stepBtn.disabled = true;\n    };\n    pauseBtn.onclick = function (e) {\n        chip8.pausar();\n        pauseBtn.disabled = true;\n        playBtn.disabled = false;\n        stepBtn.disabled = false;\n    };\n    playBtn.onclick = function (e) {\n        chip8.play();\n        pauseBtn.disabled = false;\n        playBtn.disabled = true;\n        stepBtn.disabled = true;\n    };\n    stepBtn.onclick = function (e) {\n        chip8.step();\n    };\n    document.addEventListener('keydown', function (e) {\n        try {\n            chip8.teclaBaixo(Object(_input__WEBPACK_IMPORTED_MODULE_3__[/* traduzirInput */ \"a\"])(e.keyCode));\n        }\n        catch (e) {\n        }\n    });\n    document.addEventListener('keyup', function (e) {\n        try {\n            chip8.teclaCima(Object(_input__WEBPACK_IMPORTED_MODULE_3__[/* traduzirInput */ \"a\"])(e.keyCode));\n        }\n        catch (e) {\n        }\n    });\n    try {\n        input.addEventListener('change', function () {\n            if (this.files === null) {\n                window.alert('Erro ao ler arquivo');\n                return;\n            }\n            enviarPrograma(chip8, this.files[0]);\n            pauseBtn.disabled = false;\n            playBtn.disabled = true;\n            stepBtn.disabled = true;\n        });\n    }\n    catch (e) {\n        window.alert(e);\n        console.error(e);\n    }\n    var milissegundos = 2;\n    var atualizar = function () {\n        if (jogoCarregado) {\n            renderizarAssembly(chip8, divInstrucoes);\n            chip8.emularCiclo();\n            if (chip8.desenharFlag) {\n                Object(_renderizador__WEBPACK_IMPORTED_MODULE_2__[/* renderizar */ \"a\"])(renderizador, chip8.tela);\n            }\n        }\n        setTimeout(atualizar, milissegundos);\n    };\n    setTimeout(atualizar, milissegundos);\n    Promise.resolve().then(function () { return atualizar(); });\n    Promise.resolve().then(function () { return atualizar(); });\n}\ntry {\n    main();\n}\ncatch (e) {\n    window.alert(e);\n    console.error(e);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)[\"Promise\"]))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(8)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function("return this")() || (1, eval)("this");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n')}]);