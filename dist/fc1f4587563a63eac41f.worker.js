!function(C){var A={};function B(g){if(A[g])return A[g].exports;var I=A[g]={i:g,l:!1,exports:{}};return C[g].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=C,B.c=A,B.d=function(g,I,C){B.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:C})},B.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},B.t=function(I,g){if(1&g&&(I=B(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var C=Object.create(null);if(B.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var A in I)B.d(C,A,function(g){return I[g]}.bind(null,A));return C},B.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return B.d(I,"a",I),I},B.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},B.p="/dist/",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/chip8.ts\n/**\n * @fileoverview Máquina vírtual do CHIP-8\n * @author Roberto Nazareth Guedes\n */\nvar Chip8 = /** @class */ (function () {\n    function Chip8() {\n        this._opcode = 0;\n        this._sp = 0;\n        this._pc = 0x200;\n        this._i = 0;\n        this._delayTempo = 0;\n        this._somTempo = 0;\n        this._esperandoInput = false;\n        this._esperandoRegistrador = 0;\n        this._desenharFlag = false;\n        this._tela = new Array(32);\n        this._memoria = new Uint8Array(0x1000);\n        this._stack = new Uint16Array(16);\n        this._v = new Uint8Array(16);\n        this._teclado = new Uint8Array(16);\n        for (var i = 0; i < 32; ++i) {\n            this._tela[i] = new Array(64);\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        for (var i = 0; i < Chip8.MEMORIA_TAMANHO; ++i) {\n            this._memoria[i] = 0;\n        }\n        for (var i = 0; i < this._stack.length; ++i) {\n            this._stack[i] = 0;\n        }\n        for (var i = 0; i < this._v.length; ++i) {\n            this._v[i] = 0;\n        }\n        for (var i = 0; i < this._teclado.length; ++i) {\n            this._teclado[i] = 0;\n        }\n        this.carregarFonte();\n    }\n    /** Reseta o emulador ao seu estado inicial */\n    Chip8.prototype.resetar = function () {\n        this._opcode = 0;\n        this._sp = 0;\n        this._pc = 0x200;\n        this._i = 0;\n        this._delayTempo = 0;\n        this._somTempo = 0;\n        this._esperandoInput = false;\n        this._esperandoRegistrador = 0;\n        this._desenharFlag = false;\n        for (var i = 0; i < 32; ++i) {\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        for (var i = 0; i < Chip8.MEMORIA_TAMANHO; ++i) {\n            this._memoria[i] = 0;\n        }\n        for (var i = 0; i < 16; ++i) {\n            this._stack[i] = 0;\n        }\n        for (var i = 0; i < 16; ++i) {\n            this._v[i] = 0;\n        }\n        for (var i = 0; i < 16; ++i) {\n            this._teclado[i] = 0;\n        }\n        this.carregarFonte();\n    };\n    /**\n     * Carrega um programa na memória\n     * @param buffer Programa a ser carregado na memória\n     */\n    Chip8.prototype.carregarPrograma = function (buffer) {\n        var _this = this;\n        buffer.forEach(function (byte, i) {\n            var pos = i + 0x200;\n            if (pos < Chip8.MEMORIA_TAMANHO) {\n                _this._memoria[pos] = byte;\n            }\n        });\n    };\n    /** Emula um ciclo da CPU */\n    Chip8.prototype.emularCiclo = function () {\n        this.buscarOpcode();\n        this.executarOpcode();\n        if (this._delayTempo > 0) {\n            --this._delayTempo;\n        }\n        if (this._somTempo > 0) {\n            if (this._somTempo === 1) {\n                console.log("BEEP");\n            }\n            --this._somTempo;\n        }\n    };\n    /** Carrega a fonte na memória */\n    Chip8.prototype.carregarFonte = function () {\n        var fonte = [\n            0xF0, 0x90, 0x90, 0x90, 0xF0,\n            0x20, 0x60, 0x20, 0x20, 0x70,\n            0xF0, 0x10, 0xF0, 0x80, 0xF0,\n            0xF0, 0x10, 0xF0, 0x10, 0xF0,\n            0x90, 0x90, 0xF0, 0x10, 0x10,\n            0xF0, 0x80, 0xF0, 0x10, 0xF0,\n            0xF0, 0x80, 0xF0, 0x90, 0xF0,\n            0xF0, 0x10, 0x20, 0x40, 0x40,\n            0xF0, 0x90, 0xF0, 0x90, 0xF0,\n            0xF0, 0x90, 0xF0, 0x10, 0xF0,\n            0xF0, 0x90, 0xF0, 0x90, 0x90,\n            0xE0, 0x90, 0xE0, 0x90, 0xE0,\n            0xF0, 0x80, 0x80, 0x80, 0xF0,\n            0xE0, 0x90, 0x90, 0x90, 0xE0,\n            0xF0, 0x80, 0xF0, 0x80, 0xF0,\n            0xF0, 0x80, 0xF0, 0x80, 0x80,\n        ];\n        for (var i = 0; i < 80; ++i) {\n            this._memoria[i] = fonte[i];\n        }\n    };\n    /**\n     * Busca o opcode de acordo com o endereço atual do contador de programa\n     * e atribui este valor para a propriedade "opcode" da cpu.\n     */\n    Chip8.prototype.buscarOpcode = function () {\n        // opcodes tem 2 bytes (16 bits), então, precisamos juntar dois bytes.\n        // Por exemplo: se o valor do primeiro byte for A2, e o do segundo for F0, \n        // então o opcode será A2F0.\n        // "memoria[pc] << 8" cria 4 zeros no numero (em binario), e depois a operação\n        // bitwise OR junta os 2 numeros\n        var primeiro = this._memoria[this._pc];\n        var segundo = this._memoria[this._pc + 1];\n        this._opcode = (primeiro << 8) | segundo;\n    };\n    Chip8.prototype.executarOpcode = function () {\n        switch (this._opcode & 0xF000) {\n            case 0x0000:\n                this.executarOp_0xxx();\n                break;\n            case 0x1000:\n                this.op_1nnn_jp();\n                break;\n            case 0x2000:\n                this.op_2nnn_call();\n                break;\n            case 0x3000:\n                this.op_3xkk_se();\n                break;\n            case 0x4000:\n                this.op_4xkk_sne();\n                break;\n            case 0x5000:\n                this.op_5xy0_se();\n                break;\n            case 0x6000:\n                this.op_6xkk_ld();\n                break;\n            case 0x7000:\n                this.op_7xkk_add();\n                break;\n            case 0x8000:\n                this.executarOp_8xxx();\n                break;\n            case 0x9000:\n                this.op_9xy0_sne();\n                break;\n            case 0xA000:\n                this.op_annn_ld();\n                break;\n            case 0xB000:\n                this.op_bnnn_jmp();\n                break;\n            case 0xC000:\n                this.op_cxkk_rnd();\n                break;\n            case 0xD000:\n                this.op_dxyn_draw();\n                break;\n            case 0xE000:\n                this.executarOp_exxx();\n                break;\n            case 0xF000:\n                this.executarOp_fxxx();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this._opcode);\n                this._pc += 2;\n                break;\n        }\n    };\n    Chip8.prototype.executarOp_0xxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x00EE:\n                this.op_00ee_ret();\n                break;\n            case 0x00E0:\n                this.op_00e0_clr();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this._opcode);\n                this._pc += 2;\n                break;\n        }\n    };\n    Chip8.prototype.executarOp_8xxx = function () {\n        switch (this._opcode & 0x000F) {\n            case 0x0000:\n                this.op_8xy0_ld();\n                break;\n            case 0x0001:\n                this.op_8xy1_or();\n                break;\n            case 0x0002:\n                this.op_8xy2_and();\n                break;\n            case 0x0003:\n                this.op_8xy3_xor();\n                break;\n            case 0x0004:\n                this.op_8xy4_add();\n                break;\n            case 0x0005:\n                this.op_8xy5_sub();\n                break;\n            case 0x0006:\n                this.op_8x06_shr();\n                break;\n            case 0x0007:\n                this.op_8xy7_subn();\n                break;\n            case 0x000E:\n                this.op_8x0e_shl();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this._opcode);\n                this._pc += 2;\n                break;\n        }\n    };\n    Chip8.prototype.executarOp_exxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x009E:\n                this.op_ex9e_skp();\n                break;\n            case 0x00A1:\n                this.op_exa1_sknp();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this._opcode);\n                this._pc += 2;\n                break;\n        }\n    };\n    Chip8.prototype.executarOp_fxxx = function () {\n        switch (this._opcode & 0x00FF) {\n            case 0x0007:\n                this.op_fx07_ld();\n                break;\n            case 0x000A:\n                this.op_fx0a_ld();\n                break;\n            case 0x0015:\n                this.op_fx15_ld();\n                break;\n            case 0x0018:\n                this.op_fx18_ld();\n                break;\n            case 0x001E:\n                this.op_fx1e_add();\n                break;\n            case 0x0029:\n                this.op_fx29_ld();\n                break;\n            case 0x0033:\n                this.op_fx33_ld();\n                break;\n            case 0x0055:\n                this.op_fx55_ld();\n                break;\n            case 0x0065:\n                this.op_fx65_ld();\n                break;\n            default:\n                console.error("Opcode desconhecido: " + this._opcode);\n                this._pc += 2;\n                break;\n        }\n    };\n    /**\n     * CLR\n     * Limpa a tela\n     */\n    Chip8.prototype.op_00e0_clr = function () {\n        for (var i = 0; i < 32; ++i) {\n            for (var j = 0; j < 64; ++j) {\n                this._tela[i][j] = 0;\n            }\n        }\n        this._desenharFlag = true;\n        this._pc += 2;\n    };\n    /**\n     * Opcode 00EE, returna de uma subrotina\n     */\n    Chip8.prototype.op_00ee_ret = function () {\n        this._pc = this._stack[this._sp - 1];\n        this._sp -= 1;\n        this._pc += 2;\n    };\n    /**\n     * JP endereco\n     * Opcode 1nnn: pula o programa para um endereço, onde nnn é o endereço\n     */\n    Chip8.prototype.op_1nnn_jp = function () {\n        this._pc = this.nnn;\n    };\n    /**\n     * Opcode 2nnn: pula o programa para uma subrotina, onde nnn é o endereço da subrotina.\n     */\n    Chip8.prototype.op_2nnn_call = function () {\n        // guarda o endereço atual do programa na stack\n        this._stack[this._sp] = this._pc;\n        this._sp += 1;\n        this._pc = this.nnn;\n    };\n    /**\n     * Opcode 3xkk: pula a proxima instrução se kk for igual a Vx\n     */\n    Chip8.prototype.op_3xkk_se = function () {\n        if (this._v[this.x] === this.kk) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * Opcode 4xkk: pula a proxima instrução se kk for diferente de Vx\n     */\n    Chip8.prototype.op_4xkk_sne = function () {\n        if (this._v[this.x] !== this.kk) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * Opcode 5xy0: pula a proxima instrução se Vx for igual a Vy\n     */\n    Chip8.prototype.op_5xy0_se = function () {\n        if (this._v[this.x] === this._v[this.y]) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD Vx, byte\n     * Opcode 6xkk: guarda o valor kk em Vx\n     */\n    Chip8.prototype.op_6xkk_ld = function () {\n        this._v[this.x] = this.kk;\n        this._pc += 2;\n    };\n    /**\n     * ADD Vx, byte\n     * Opcode 7xkk: adiciona o valor kk ao registrador Vx\n     */\n    Chip8.prototype.op_7xkk_add = function () {\n        this._v[this.x] += this.kk;\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, Vy\n     * opcode 8xy0: salva o valor de Vy no registrador Vx\n     */\n    Chip8.prototype.op_8xy0_ld = function () {\n        this._v[this.x] = this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * OR Vx, Vy\n     * opcode 8xy1: performa uma uma operação bitwise OR\n     * nos valores de Vx e Vy, e salva o resultado no\n     * registrador Vx\n     */\n    Chip8.prototype.op_8xy1_or = function () {\n        this._v[this.x] |= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * AND Vx, Vy\n     * opcode 8xy2: performa uma uma operação bitwise AND\n     * nos valores de Vx e Vy, e salva o resultado no\n     * registrador Vx\n     */\n    Chip8.prototype.op_8xy2_and = function () {\n        this._v[this.x] &= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n    * XOR Vx, Vy\n    * opcode 8xy3: performa uma uma operação bitwise XOR (OR exclusivo)\n    * nos valores de Vx e Vy, e salva o resultado no\n    * registrador Vx\n    */\n    Chip8.prototype.op_8xy3_xor = function () {\n        this._v[this.x] ^= this._v[this.y];\n        this._pc += 2;\n    };\n    /**\n     * ADD Vx, Vy\n     * opcode 8xy4: adiciona o valor de Vy a Vx e ativa a carry flag\n     * do registrador VF caso o resultado seja maior do que 255\n     */\n    Chip8.prototype.op_8xy4_add = function () {\n        this._v[this.x] += this._v[this.y];\n        this._v[0xF] = +(this._v[this.x] > 255);\n        this._pc += 2;\n    };\n    /**\n     * SUB Vx, Vy\n     * opcode 8xy5: subtrai Vx por Vy e guarda o resultado em Vx.\n     * Caso Vx seja maior que Vy, VF é igual a 1, e caso o contrario\n     * é igual a 0\n     */\n    Chip8.prototype.op_8xy5_sub = function () {\n        this._v[0xF] = +(this._v[this.x] > this._v[this.y]);\n        this._v[this.x] -= this._v[this.y];\n        /*\n        if (this._v[this.x] < 0) {\n            this._v[this.x] += 256;\n        }\n        */\n        this._pc += 2;\n    };\n    /**\n     * SHR Vx\n     * opcode 8x06: desloca o número uma casa (em binário) para a direita (right shift).\n     * O bit menos significativo do valor original de Vx é salvo no\n     * registrador VF\n     */\n    Chip8.prototype.op_8x06_shr = function () {\n        var vx = this._v[this.x];\n        this._v[0xF] = 0x1 & vx;\n        this._v[this.x] = vx >> 1;\n        this._pc += 2;\n    };\n    /**\n     * SUBN Vx, Vy\n     * opcode 8xy7: subtrai Vy por Vx e guarda o resultado em Vx.\n     * Caso Vx seja maior que Vy, VF é igual a 1, e caso o contrario\n     * é igual a 0\n     */\n    Chip8.prototype.op_8xy7_subn = function () {\n        var vx = this._v[this.x];\n        var vy = this._v[this.y];\n        this._v[0xF] = vy > vx ? 1 : 0;\n        this._v[this.x] = vy - vx;\n        this._pc += 2;\n    };\n    /**\n     * SHL Vx\n     * opcode 8x0E: desloca o número uma casa (em binário) para a esquerda (left shift).\n     * O bit mais significativo do valor original de Vx é salvo no\n     * registrador VF\n     */\n    Chip8.prototype.op_8x0e_shl = function () {\n        var vx = this._v[this.x];\n        /*\n        this._v[0xF] = +(this._v[this.x] & 0x80);\n        this._v[this.x] <<= 1;\n        */\n        this._v[0xF] = vx >> 7;\n        this._v[this.x] = vx << 1;\n        this._pc += 2;\n    };\n    /**\n     * SNE Vx, Vy\n     * Pula a proxima instrução se Vx for diferente de Vy\n     */\n    Chip8.prototype.op_9xy0_sne = function () {\n        if (this._v[this.x] !== this._v[this.y]) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * JMP V0, endereco\n     * Pula para o endereço nnn + V0\n     */\n    Chip8.prototype.op_annn_ld = function () {\n        this._i = this.nnn;\n        this._pc += 2;\n    };\n    /**\n     * JMP V0, endereco\n     * Pula para o endereço nnn + V0\n     */\n    Chip8.prototype.op_bnnn_jmp = function () {\n        this._pc = this._v[this.x] + this.nnn;\n    };\n    /**\n     * RND Vx, byte\n     * Vx = byte aleatório & kk\n     */\n    Chip8.prototype.op_cxkk_rnd = function () {\n        var byte_aleatorio = Math.floor(Math.random() * 0xFF) & (this._opcode & 0xFF);\n        this._v[this.x] = byte_aleatorio & this.kk;\n        this._pc += 2;\n    };\n    Chip8.prototype.setPixel = function (pos_x, pos_y, fim_sprite) {\n        var colisao = 0;\n        var sprite = this._memoria.slice(this._i, fim_sprite + 1);\n        for (var i = 0; i < sprite.length - 1; ++i) {\n            for (var j = 0; j < 8; ++j) {\n                var x = (pos_x + j) % 64;\n                var y = (pos_y + i) % 32;\n                if ((sprite[i] & (0x80 >> j)) !== 0) {\n                    if (this._tela[y][x] === 1) {\n                        colisao = 1;\n                    }\n                    this._tela[y][x] ^= 1;\n                }\n            }\n        }\n        this._desenharFlag = true;\n        return colisao;\n    };\n    /**\n     * Desenha um sprite na coordenada (Vx, Vy), com 8 pixels de largura e N de altura\n     */\n    Chip8.prototype.op_dxyn_draw = function () {\n        var n = this._opcode & 0x000F;\n        var fim_sprite = this._i + n;\n        this._v[0xF] = this.setPixel(this._v[this.x], this._v[this.y], fim_sprite);\n        this._pc += 2;\n    };\n    /**\n     * SKP Vx\n     * pula a próxima instrução se a tecla com o valor de Vx estiver sendo pressionada\n     */\n    Chip8.prototype.op_ex9e_skp = function () {\n        var tecla = this._v[this.x];\n        if (this._teclado[tecla] !== 0) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * SKNP Vx\n     * pula a próxima instrução se a tecla com o valor de Vx não estiver sendo pressionada\n     */\n    Chip8.prototype.op_exa1_sknp = function () {\n        var tecla = this._v[this.x];\n        if (this._teclado[tecla] === 0) {\n            this._pc += 4;\n        }\n        else {\n            this._pc += 2;\n        }\n    };\n    /**\n     * LD Vx, K\n     * Espera o usuário pressionar uma tecla, e atribui o valor a Vx\n     */\n    Chip8.prototype.op_fx0a_ld = function () {\n        this._esperandoRegistrador = this.x;\n        this._esperandoInput = true;\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, DELAY_TIMER\n     * Atribui o valor do temporizador de delay ao Vx\n     */\n    Chip8.prototype.op_fx07_ld = function () {\n        this._v[this.x] = this._delayTempo;\n        this._pc += 2;\n    };\n    /**\n     * LD DELAY_TIMER, Vx\n     * Atribui o valor de Vx ao temporizador de delay\n     */\n    Chip8.prototype.op_fx15_ld = function () {\n        this._delayTempo = this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * LD SOUND_TIMER, Vx\n     * Atribui o valor de Vx ao temporizador de som\n     */\n    Chip8.prototype.op_fx18_ld = function () {\n        this._somTempo = this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * ADD I, Vx\n     * I = I + Vx\n     */\n    Chip8.prototype.op_fx1e_add = function () {\n        this._i += this._v[this.x];\n        this._pc += 2;\n    };\n    /**\n     * LD F, Vx\n     * Atribui ao I o endereço do sprite correspondente à Vx\n     */\n    Chip8.prototype.op_fx29_ld = function () {\n        this._i = this.x * 5;\n        this._pc += 2;\n    };\n    /**\n     * LD B, Vx\n     * opcode Fx33: Guarda a representação em codificação binária decimal (BCD)\n     * do valor do registrador Vx. O digito na casa das centenas será salvo no\n     * endereço "i" (o registrador de index), a casa das dezenas será salva no\n     * endereço "i + 1", e o digito da casa das unidades erá salvo em "i + 2"\n     */\n    Chip8.prototype.op_fx33_ld = function () {\n        var valor = this._v[this.x];\n        this._memoria[this._i] = valor / 100;\n        this._memoria[this._i + 1] = (valor / 10) % 10;\n        this._memoria[this._i + 2] = (valor % 100) % 10;\n        this._pc += 2;\n    };\n    /**\n     * LD [I], Vx\n     * Guarda os valores de V0 à Vx na memória a partir do endereço I\n     */\n    Chip8.prototype.op_fx55_ld = function () {\n        for (var i = 0; i <= this.x; i++) {\n            this._memoria[i + this._i] = this._v[i];\n        }\n        this._pc += 2;\n    };\n    /**\n     * LD Vx, [I]\n     * Preenche os registradores de V0 à Vx com valores na memória a partir do endereço I\n     */\n    Chip8.prototype.op_fx65_ld = function () {\n        for (var i = 0; i <= this.x; i++) {\n            this._v[i] = this._memoria[i + this._i];\n        }\n        this._pc += 2;\n    };\n    /** Registra que uma tecla foi apertada */\n    Chip8.prototype.teclaBaixo = function (tecla) {\n        this._teclado[tecla] = 1;\n    };\n    /** Registra que uma tecla foi solta */\n    Chip8.prototype.teclaCima = function (tecla) {\n        this._teclado[tecla] = 0;\n    };\n    Object.defineProperty(Chip8.prototype, "v", {\n        get: function () {\n            return this._v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "opcode", {\n        get: function () {\n            return this._opcode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "nnn", {\n        /** As 3 últimas casas (em hexadecimal) do opcode */\n        get: function () {\n            return this._opcode & 0x0FFF;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "kk", {\n        /** As 2 últimas casas (em hexadecimal) do opcode */\n        get: function () {\n            return this._opcode & 0x00FF;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "x", {\n        /** O número na segunda casa (da esquerda pra direita em hexadecimal) do opcode */\n        get: function () {\n            return (this._opcode & 0x0F00) >> 8;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "y", {\n        /** O número na terceira casa (da esquerda pra direita em hexadecimal) do opcode */\n        get: function () {\n            return (this._opcode & 0x00F0) >> 4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "desenharFlag", {\n        get: function () {\n            return this._desenharFlag;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "tela", {\n        get: function () {\n            return this._tela;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chip8.prototype, "teclado", {\n        get: function () {\n            return this._teclado;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Chip8.MEMORIA_TAMANHO = 0x1000;\n    return Chip8;\n}());\n/* harmony default export */ var chip8 = (Chip8);\n\n// CONCATENATED MODULE: ./node_modules/ts-loader??ref--6!./src/worker.ts\n/**\n * @fileoverview Esta thread cuida de processar as instruções\n * da máquina virtual, enquanto a thread principal renderiza\n * a tela e recebe input\n * @author Roberto Nazareth Guedes\n */\n\n;\nvar ctx = self;\nvar worker_chip8 = new chip8();\nvar jogoCarregado = false;\nctx.onmessage = function (evento) {\n    var dados = evento.data;\n    if (dados.mensagem === \'carregar\') {\n        //carregar o programa na memória do CHIP-8\n        if (!(dados.rom instanceof Uint8Array)) {\n            window.alert(\'Erro ao ler arquivo\');\n            return;\n        }\n        if (jogoCarregado) {\n            worker_chip8.resetar();\n        }\n        worker_chip8.carregarPrograma(dados.rom);\n        jogoCarregado = true;\n    }\n    else if (dados.mensagem === \'teclaBaixo\') {\n        // uma tecla foi apertada, registrar input\n        console.log(dados.tecla);\n        worker_chip8.teclaBaixo(dados.tecla);\n    }\n    else if (dados.mensagem === \'teclaCima\') {\n        // uma tecla foi solta, registrar input\n        worker_chip8.teclaCima(dados.tecla);\n    }\n};\nsetInterval(function () {\n    if (jogoCarregado) {\n        worker_chip8.emularCiclo();\n        if (worker_chip8.desenharFlag) {\n            ctx.postMessage({\n                mensagem: \'renderizar\',\n                tela: worker_chip8.tela,\n            });\n        }\n    }\n}, 0.4);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);